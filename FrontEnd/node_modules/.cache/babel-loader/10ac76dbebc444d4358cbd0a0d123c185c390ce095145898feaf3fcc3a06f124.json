{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elodi\\\\OneDrive\\\\Documents\\\\ArgentBank-website\\\\FrontEnd\\\\src\\\\components\\\\headeruser\\\\headeruser.jsx\",\n  _s = $RefreshSig$();\n/** import des hooks useState et useEffect de React, ainsi que le composant EditUserInfo. */\nimport React, { useState, useEffect } from \"react\";\nimport EditUserInfo from \"../../components/EditUserInfo/EditUserInfo\";\n//import des hooks useSelector et useDispatch de Redux, qui permettent d'accéder à l'état global de l'application et de déclencher des actions.\nimport { useSelector, useDispatch } from \"react-redux\";\n//importe l'action fetchUserProfile depuis le fichier authActions.js.\nimport { fetchUserProfile } from \"../../actions/authActions\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  _s();\n  //code initialise un état local avec le hook useState. showEditUserInfo est utilisé pour contrôler l'affichage du composant EditUserInfo.\n  const [showEditUserInfo, setShowEditUserInfo] = useState(false);\n  //code utilise le hook useSelector pour extraire les propriétés userProfile et accessToken de l'état global de l'application (stocké dans le store Redux).\n  const {\n    userProfile,\n    accessToken\n  } = useSelector(state => state.auth);\n  //code utilise le hook useDispatch pour obtenir une référence à la fonction dispatch de Redux, qui permet de déclencher des actions.\n  const dispatch = useDispatch();\n\n  /*fonction est appelée lorsque l'utilisateur clique sur le bouton \"Edit name\". \r\n  Elle définit la valeur de showEditUserInfo à true pour afficher le composant EditUserInfo.*/\n  const handleEditNameClick = () => {\n    setShowEditUserInfo(true);\n  };\n\n  /**hook useEffect est appelé lorsque le composant est monté ou que les dépendances dispatch ou accessToken changent.\r\n   * Il déclenche l'action fetchUserProfile avec le accessToken pour récupérer le profil de l'utilisateur. */\n  useEffect(() => {\n    if (accessToken) {\n      dispatch(fetchUserProfile(accessToken));\n    }\n  }, [dispatch, accessToken]);\n  //section contient le code JSX qui définit le rendu du composant.\n  /**{userProfile ? = Si userProfile existe, le composant affiche un message de bienvenue avec le nom de l'utilisateur,\r\n   * un bouton \"Edit name\" et le composant EditUserInfo si showEditUserInfo est vrai.\r\n   * Si userProfile est null, le composant affiche un message \"Loading...\".*/\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: userProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome back\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), userProfile.userName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-button\",\n        onClick: handleEditNameClick,\n        children: \"Edit name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), showEditUserInfo && /*#__PURE__*/_jsxDEV(EditUserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Header, \"Zapo6snmUo7WRcNND0dvS5VVN8A=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","useEffect","EditUserInfo","useSelector","useDispatch","fetchUserProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","Header","_s","showEditUserInfo","setShowEditUserInfo","userProfile","accessToken","state","auth","dispatch","handleEditNameClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userName","onClick","_c","$RefreshReg$"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/components/headeruser/headeruser.jsx"],"sourcesContent":["/** import des hooks useState et useEffect de React, ainsi que le composant EditUserInfo. */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport EditUserInfo from \"../../components/EditUserInfo/EditUserInfo\";\r\n//import des hooks useSelector et useDispatch de Redux, qui permettent d'accéder à l'état global de l'application et de déclencher des actions.\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n//importe l'action fetchUserProfile depuis le fichier authActions.js.\r\nimport { fetchUserProfile } from \"../../actions/authActions\";\r\n\r\nfunction Header() {\r\n  //code initialise un état local avec le hook useState. showEditUserInfo est utilisé pour contrôler l'affichage du composant EditUserInfo.\r\n  const [showEditUserInfo, setShowEditUserInfo] = useState(false);\r\n  //code utilise le hook useSelector pour extraire les propriétés userProfile et accessToken de l'état global de l'application (stocké dans le store Redux).\r\n  const { userProfile, accessToken } = useSelector((state) => state.auth);\r\n  //code utilise le hook useDispatch pour obtenir une référence à la fonction dispatch de Redux, qui permet de déclencher des actions.\r\n  const dispatch = useDispatch();\r\n\r\n  /*fonction est appelée lorsque l'utilisateur clique sur le bouton \"Edit name\". \r\n  Elle définit la valeur de showEditUserInfo à true pour afficher le composant EditUserInfo.*/\r\n  const handleEditNameClick = () => {\r\n    setShowEditUserInfo(true);\r\n  };\r\n\r\n  /**hook useEffect est appelé lorsque le composant est monté ou que les dépendances dispatch ou accessToken changent.\r\n   * Il déclenche l'action fetchUserProfile avec le accessToken pour récupérer le profil de l'utilisateur. */\r\n  useEffect(() => {\r\n    if (accessToken) {\r\n      dispatch(fetchUserProfile(accessToken));\r\n    }\r\n  }, [dispatch, accessToken]);\r\n  //section contient le code JSX qui définit le rendu du composant.\r\n  /**{userProfile ? = Si userProfile existe, le composant affiche un message de bienvenue avec le nom de l'utilisateur,\r\n   * un bouton \"Edit name\" et le composant EditUserInfo si showEditUserInfo est vrai.\r\n   * Si userProfile est null, le composant affiche un message \"Loading...\".*/\r\n  return (\r\n    <div className=\"header\">\r\n      {userProfile ? (\r\n        <>\r\n          <h1>\r\n            Welcome back\r\n            <br />\r\n            {userProfile.userName}\r\n          </h1>\r\n          <button className=\"edit-button\" onClick={handleEditNameClick}>\r\n            Edit name\r\n          </button>\r\n          {showEditUserInfo && <EditUserInfo />}\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,4CAA4C;AACrE;AACA,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD;AACA,SAASC,gBAAgB,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7D,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/D;EACA,MAAM;IAAEc,WAAW;IAAEC;EAAY,CAAC,GAAGZ,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACvE;EACA,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;AACF;EACE,MAAMe,mBAAmB,GAAGA,CAAA,KAAM;IAChCN,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;;EAED;AACF;EACEZ,SAAS,CAAC,MAAM;IACd,IAAIc,WAAW,EAAE;MACfG,QAAQ,CAACb,gBAAgB,CAACU,WAAW,CAAC,CAAC;IACzC;EACF,CAAC,EAAE,CAACG,QAAQ,EAAEH,WAAW,CAAC,CAAC;EAC3B;EACA;AACF;AACA;EACE,oBACER,OAAA;IAAKa,SAAS,EAAC,QAAQ;IAAAC,QAAA,EACpBP,WAAW,gBACVP,OAAA,CAAAE,SAAA;MAAAY,QAAA,gBACEd,OAAA;QAAAc,QAAA,GAAI,cAEF,eAAAd,OAAA;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACLX,WAAW,CAACY,QAAQ;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACLlB,OAAA;QAAQa,SAAS,EAAC,aAAa;QAACO,OAAO,EAAER,mBAAoB;QAAAE,QAAA,EAAC;MAE9D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRb,gBAAgB,iBAAIL,OAAA,CAACL,YAAY;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACrC,CAAC,gBAEHlB,OAAA;MAAAc,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACd,EAAA,CA5CQD,MAAM;EAAA,QAIwBP,WAAW,EAE/BC,WAAW;AAAA;AAAAwB,EAAA,GANrBlB,MAAM;AA6Cf,eAAeA,MAAM;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
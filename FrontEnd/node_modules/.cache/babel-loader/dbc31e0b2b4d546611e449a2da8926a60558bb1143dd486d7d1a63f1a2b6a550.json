{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elodi\\\\OneDrive\\\\Documents\\\\ArgentBank-website\\\\FrontEnd\\\\src\\\\components\\\\EditUserInfo\\\\EditUserInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateUsername } from \"../../actions/authActions\";\nimport \"../EditUserInfo/EditUserinfo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditUserInfo = () => {\n  _s();\n  const {\n    userProfile,\n    accessToken\n  } = useSelector(state => state.auth); //extraits du store Redux à l'aide de useSelector.\n  const {\n    firstName,\n    lastName,\n    userName\n  } = userProfile; //extraits de userProfile\n  const dispatch = useDispatch(); //fonction utilisée pour dispatche des actions Redux.\n  //useDispatch et useSelector sont des hooks Redux utilisés pour interagir avec le store Redux.\n\n  //useState et useEffect sont des hooks React utilisés pour gérer l'état et les effets de bord.\n  const [isFormVisible, setIsFormVisible] = useState(false); //contrôle l'affichage du formulaire d'édition.\n  const [username, setUsername] = useState(userName); //stockent la valeur du nom d'utilisateur.\n  const [initialUsername, setInitialUsername] = useState(userName); //stockent la valeur du nom d'utilisateur initiale.\n  const [isLoading, setIsLoading] = useState(false); //indique si une action est en cours\n\n  /**\r\n   * Cette méthode est appelée lorsque l'utilisateur clique sur le bouton \"Edit Name\".\r\n   * Elle affiche le formulaire d'édition en mettant isFormVisible à true et\r\n   * initialise username et initialUsername avec la valeur actuelle du userName.\r\n   */\n  const handleEditName = () => {\n    setIsFormVisible(true);\n    setUsername(userName);\n    setInitialUsername(userName);\n  };\n\n  /**\r\n   * Cette méthode est appelée lorsque l'utilisateur modifie la valeur du champ username.\r\n   * Elle met à jour la valeur de username en conséquence.\r\n   */\n  const handleUsernameChange = event => {\n    setUsername(event.target.value);\n  };\n\n  /**\r\n   * Cette méthode met à jour la valeur de initialUsername avec la nouvelle valeur de username.\r\n   * Elle dispatche l'action updateUsername avec accessToken et la nouvelle valeur de username.\r\n   * Elle met à jour le message pour indiquer que les informations ont été enregistrées avec succès.\r\n   */\n  const handleSave = async () => {\n    try {\n      setIsLoading(true);\n      await dispatch(updateUsername({\n        accessToken,\n        userName: username\n      }));\n      setIsFormVisible(false);\n      setInitialUsername(username);\n    } catch (error) {\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\r\n   * Cette méthode met à jour le message pour indiquer que les modifications ont été annulées.\r\n   */\n  const handleCancel = () => {\n    setIsFormVisible(false);\n    setUsername(initialUsername);\n  };\n\n  /**\r\n   * Cette méthode retourne le rendu conditionnel du bouton \"Edit Name\" ou du formulaire d'édition en fonction de la valeur de isFormVisible.\r\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"divdesignformulaire\",\n    children: isFormVisible && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-group edit-user-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit user info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: handleUsernameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"firstName\",\n          children: \"First Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"firstName\",\n          name: \"firstName\",\n          value: firstName,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lastName\",\n          children: \"Last Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"lastName\",\n          name: \"lastName\",\n          value: lastName,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"save-btn\",\n          onClick: handleSave,\n          disabled: isLoading,\n          children: isLoading ? \"Saving...\" : \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"cancel-btn\",\n          onClick: handleCancel,\n          disabled: isLoading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(EditUserInfo, \"iQ7vpLf0MY7dZhymCurXuYixkag=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = EditUserInfo;\nexport default EditUserInfo;\nvar _c;\n$RefreshReg$(_c, \"EditUserInfo\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","updateUsername","jsxDEV","_jsxDEV","EditUserInfo","_s","userProfile","accessToken","state","auth","firstName","lastName","userName","dispatch","isFormVisible","setIsFormVisible","username","setUsername","initialUsername","setInitialUsername","isLoading","setIsLoading","handleEditName","handleUsernameChange","event","target","value","handleSave","error","setMessage","handleCancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","htmlFor","id","name","readOnly","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/components/EditUserInfo/EditUserInfo.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateUsername } from \"../../actions/authActions\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nconst EditUserInfo = () => {\r\n  const { userProfile, accessToken } = useSelector((state) => state.auth); //extraits du store Redux à l'aide de useSelector.\r\n  const { firstName, lastName, userName } = userProfile; //extraits de userProfile\r\n  const dispatch = useDispatch(); //fonction utilisée pour dispatche des actions Redux.\r\n  //useDispatch et useSelector sont des hooks Redux utilisés pour interagir avec le store Redux.\r\n\r\n  //useState et useEffect sont des hooks React utilisés pour gérer l'état et les effets de bord.\r\n  const [isFormVisible, setIsFormVisible] = useState(false); //contrôle l'affichage du formulaire d'édition.\r\n  const [username, setUsername] = useState(userName); //stockent la valeur du nom d'utilisateur.\r\n  const [initialUsername, setInitialUsername] = useState(userName); //stockent la valeur du nom d'utilisateur initiale.\r\n  const [isLoading, setIsLoading] = useState(false); //indique si une action est en cours\r\n\r\n  /**\r\n   * Cette méthode est appelée lorsque l'utilisateur clique sur le bouton \"Edit Name\".\r\n   * Elle affiche le formulaire d'édition en mettant isFormVisible à true et\r\n   * initialise username et initialUsername avec la valeur actuelle du userName.\r\n   */\r\n  const handleEditName = () => {\r\n    setIsFormVisible(true);\r\n    setUsername(userName);\r\n    setInitialUsername(userName);\r\n  };\r\n\r\n  /**\r\n   * Cette méthode est appelée lorsque l'utilisateur modifie la valeur du champ username.\r\n   * Elle met à jour la valeur de username en conséquence.\r\n   */\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Cette méthode met à jour la valeur de initialUsername avec la nouvelle valeur de username.\r\n   * Elle dispatche l'action updateUsername avec accessToken et la nouvelle valeur de username.\r\n   * Elle met à jour le message pour indiquer que les informations ont été enregistrées avec succès.\r\n   */\r\n  const handleSave = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      await dispatch(updateUsername({ accessToken, userName: username }));\r\n      setIsFormVisible(false);\r\n      setInitialUsername(username);\r\n    } catch (error) {\r\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Cette méthode met à jour le message pour indiquer que les modifications ont été annulées.\r\n   */\r\n  const handleCancel = () => {\r\n    setIsFormVisible(false);\r\n    setUsername(initialUsername);\r\n  };\r\n\r\n  /**\r\n   * Cette méthode retourne le rendu conditionnel du bouton \"Edit Name\" ou du formulaire d'édition en fonction de la valeur de isFormVisible.\r\n   */\r\n  return (\r\n    <div className=\"divdesignformulaire\">\r\n      {isFormVisible && (\r\n        <form className=\"form-group edit-user-info\">\r\n          <h1>Edit user info</h1>\r\n          <div>\r\n            <label>Username:</label>\r\n            <input\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={handleUsernameChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"firstName\">First Name:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"firstName\"\r\n              name=\"firstName\"\r\n              value={firstName}\r\n              readOnly\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"lastName\">Last Name:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"lastName\"\r\n              name=\"lastName\"\r\n              value={lastName}\r\n              readOnly\r\n            />\r\n          </div>\r\n\r\n          <div className=\"buttons\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"save-btn\"\r\n              onClick={handleSave}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? \"Saving...\" : \"Save\"}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"cancel-btn\"\r\n              onClick={handleCancel}\r\n              disabled={isLoading}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"//fichier authReducer\n//importe la fonction createSlice du package @reduxjs/toolkit. Cette fonction permet de créer un \"tranche\" (slice) de l'état Redux.\nimport { createSlice } from \"@reduxjs/toolkit\";\n//import des deux actions asynchrones définies dans le fichier authActions.js.\nimport { login, fetchUserProfile, updateUsername } from \"../actions/authActions\";\n\n//crée une nouvelle \"tranche\" (slice) de l'état Redux pour la gestion de l'authentification.\nconst authSlice = createSlice({\n  name: \"auth\",\n  //name: \"auth\" : Définit le nom de la tranche.\n  initialState: {\n    //Définit l'état initial de la tranche.\n    accessToken: null,\n    userProfile: {\n      id: null,\n      email: null,\n      firstName: null,\n      lastName: null,\n      userName: null\n    },\n    status: \"idle\",\n    error: null\n  },\n  //Définit les réducteurs synchrones pour la tranche.\n  reducers: {\n    logout: state => {\n      /**fonction qui réinitialise l'état de la tranche en mettant accessToken à null,\r\n       * en réinitialisant userProfile et en supprimant le jeton d'authentification du localStorage. */\n      state.accessToken = null;\n      state.userProfile = {\n        id: null,\n        email: null\n      };\n      localStorage.removeItem(\"accessToken\");\n    }\n  },\n  //Définit les réducteurs asynchrones pour la tranche\n  extraReducers: builder => {\n    builder\n    /*Met à jour l'état avec le jeton d'authentification et les données de l'utilisateur \r\n    lorsque l'action login est accomplie avec succès.*/.addCase(login.fulfilled, (state, action) => {\n      state.accessToken = action.payload.body.token;\n      state.status = \"succeeded\";\n      state.userProfile = action.payload.user;\n    })\n    //Met à jour l'état avec le statut \"failed\" et le message d'erreur lorsque l'action login échoue.\n    .addCase(login.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    })\n    //Met à jour l'état avec le statut \"loading\" lorsque l'action fetchUserProfile est en cours.\n    .addCase(fetchUserProfile.pending, state => {\n      state.status = \"loading\";\n    })\n    //Met à jour l'état avec les données de l'utilisateur lorsque l'action fetchUserProfile est accomplie avec succès.\n    .addCase(fetchUserProfile.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.userProfile = {\n        id: action.payload.body.id,\n        email: action.payload.body.email,\n        firstName: action.payload.body.firstName,\n        lastName: action.payload.body.lastName,\n        userName: action.payload.body.userName\n      };\n    })\n    //Met à jour l'état avec le statut \"failed\" et le message d'erreur lorsque l'action fetchUserProfile échoue.\n    .addCase(fetchUserProfile.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }).addCase(updateUsername.fulfilled, (state, action) => {\n      state.userProfile.userName = action.payload.body.userName;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","login","fetchUserProfile","updateUsername","authSlice","name","initialState","accessToken","userProfile","id","email","firstName","lastName","userName","status","error","reducers","logout","state","localStorage","removeItem","extraReducers","builder","addCase","fulfilled","action","payload","body","token","user","rejected","message","pending","reducer"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/reducers/authReducer.js"],"sourcesContent":["//fichier authReducer\r\n//importe la fonction createSlice du package @reduxjs/toolkit. Cette fonction permet de créer un \"tranche\" (slice) de l'état Redux.\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n//import des deux actions asynchrones définies dans le fichier authActions.js.\r\nimport {\r\n  login,\r\n  fetchUserProfile,\r\n  updateUsername,\r\n} from \"../actions/authActions\";\r\n\r\n//crée une nouvelle \"tranche\" (slice) de l'état Redux pour la gestion de l'authentification.\r\nconst authSlice = createSlice({\r\n  name: \"auth\", //name: \"auth\" : Définit le nom de la tranche.\r\n  initialState: {\r\n    //Définit l'état initial de la tranche.\r\n    accessToken: null,\r\n    userProfile: {\r\n      id: null,\r\n      email: null,\r\n      firstName: null,\r\n      lastName: null,\r\n      userName: null,\r\n    },\r\n    status: \"idle\",\r\n    error: null,\r\n  },\r\n  //Définit les réducteurs synchrones pour la tranche.\r\n  reducers: {\r\n    logout: (state) => {\r\n      /**fonction qui réinitialise l'état de la tranche en mettant accessToken à null,\r\n       * en réinitialisant userProfile et en supprimant le jeton d'authentification du localStorage. */\r\n      state.accessToken = null;\r\n      state.userProfile = {\r\n        id: null,\r\n        email: null,\r\n      };\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  //Définit les réducteurs asynchrones pour la tranche\r\n  extraReducers: (builder) => {\r\n    builder\r\n      /*Met à jour l'état avec le jeton d'authentification et les données de l'utilisateur \r\n      lorsque l'action login est accomplie avec succès.*/\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.body.token;\r\n        state.status = \"succeeded\";\r\n        state.userProfile = action.payload.user;\r\n      })\r\n      //Met à jour l'état avec le statut \"failed\" et le message d'erreur lorsque l'action login échoue.\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      //Met à jour l'état avec le statut \"loading\" lorsque l'action fetchUserProfile est en cours.\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      //Met à jour l'état avec les données de l'utilisateur lorsque l'action fetchUserProfile est accomplie avec succès.\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.userProfile = {\r\n          id: action.payload.body.id,\r\n          email: action.payload.body.email,\r\n          firstName: action.payload.body.firstName,\r\n          lastName: action.payload.body.lastName,\r\n          userName: action.payload.body.userName,\r\n        };\r\n      })\r\n      //Met à jour l'état avec le statut \"failed\" et le message d'erreur lorsque l'action fetchUserProfile échoue.\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(updateUsername.fulfilled, (state, action) => {\r\n        state.userProfile.userName = action.payload.body.userName;\r\n      });\r\n  },\r\n});\r\nexport default authSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
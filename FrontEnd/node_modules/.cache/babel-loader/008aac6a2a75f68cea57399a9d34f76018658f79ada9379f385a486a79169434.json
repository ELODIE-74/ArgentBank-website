{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, FETCH_PROFILE_REQUEST, FETCH_PROFILE_SUCCESS, FETCH_PROFILE_FAILURE } from \"./authActions\";\nconst initialState = {\n  token: null,\n  userData: null,\n  loading: false,\n  error: null\n};\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      };\n    case FETCH_PROFILE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FETCH_PROFILE_SUCCESS:\n      return {\n        ...state,\n        userData: action.payload.userData,\n        loading: false,\n        error: null\n      };\n    case FETCH_PROFILE_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      };\n    default:\n      return state;\n  }\n};\nexport default authReducer;\n\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { login } from \"../actions/authActions\";\r\n// Importez l'action 'login'\r\nimport { fetchUserProfile } from \"../actions/authActions\";\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    accessToken: null,\r\n    userName: null,\r\n    status: \"idle\", //C'est l'état initial avant que l'action asynchrone ne soit déclenchée.\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.accessToken = null;\r\n      state.userName = null;\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.body.token;\r\n        state.status = \"succeeded\";\r\n        state.user = action.payload.user;\r\n      })\r\n\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.userName = action.payload.body.userName;\r\n      })\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/","map":{"version":3,"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","FETCH_PROFILE_REQUEST","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_FAILURE","initialState","token","userData","loading","error","authReducer","state","action","type","payload"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/reducers/authReducer.js"],"sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  FETCH_PROFILE_REQUEST,\r\n  FETCH_PROFILE_SUCCESS,\r\n  FETCH_PROFILE_FAILURE,\r\n} from \"./authActions\";\r\n\r\nconst initialState = {\r\n  token: null,\r\n  userData: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return { ...state, loading: true, error: null };\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        token: action.payload.token,\r\n        loading: false,\r\n        error: null,\r\n      };\r\n    case LOGIN_FAILURE:\r\n      return { ...state, loading: false, error: action.payload.error };\r\n    case FETCH_PROFILE_REQUEST:\r\n      return { ...state, loading: true, error: null };\r\n    case FETCH_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        userData: action.payload.userData,\r\n        loading: false,\r\n        error: null,\r\n      };\r\n    case FETCH_PROFILE_FAILURE:\r\n      return { ...state, loading: false, error: action.payload.error };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n\r\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { login } from \"../actions/authActions\";\r\n// Importez l'action 'login'\r\nimport { fetchUserProfile } from \"../actions/authActions\";\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    accessToken: null,\r\n    userName: null,\r\n    status: \"idle\", //C'est l'état initial avant que l'action asynchrone ne soit déclenchée.\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.accessToken = null;\r\n      state.userName = null;\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.body.token;\r\n        state.status = \"succeeded\";\r\n        state.user = action.payload.user;\r\n      })\r\n\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.userName = action.payload.body.userName;\r\n      })\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\r\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\r\n"],"mappings":"AAAA,SACEA,aAAa,EACbC,aAAa,EACbC,aAAa,EACbC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAqB,QAChB,eAAe;AAEtB,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKd,aAAa;MAChB,OAAO;QAAE,GAAGY,KAAK;QAAEH,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IACjD,KAAKT,aAAa;MAChB,OAAO;QACL,GAAGW,KAAK;QACRL,KAAK,EAAEM,MAAM,CAACE,OAAO,CAACR,KAAK;QAC3BE,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAKR,aAAa;MAChB,OAAO;QAAE,GAAGU,KAAK;QAAEH,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEG,MAAM,CAACE,OAAO,CAACL;MAAM,CAAC;IAClE,KAAKP,qBAAqB;MACxB,OAAO;QAAE,GAAGS,KAAK;QAAEH,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IACjD,KAAKN,qBAAqB;MACxB,OAAO;QACL,GAAGQ,KAAK;QACRJ,QAAQ,EAAEK,MAAM,CAACE,OAAO,CAACP,QAAQ;QACjCC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAKL,qBAAqB;MACxB,OAAO;QAAE,GAAGO,KAAK;QAAEH,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEG,MAAM,CAACE,OAAO,CAACL;MAAM,CAAC;IAClE;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
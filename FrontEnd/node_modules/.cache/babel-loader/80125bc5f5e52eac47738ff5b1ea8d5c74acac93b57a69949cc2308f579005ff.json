{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const login = createAsyncThunk(\"auth/login\", async ({\n  email,\n  password\n}) => {\n  //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\n  const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Erreur lors de la connexion\");\n  }\n  const data = await response.json();\n  //affichage du jeton d'authentification (token)\n  const token = data.token;\n  localStorage.setItem(\"accessToken\", token); // stockage du jeton\n  return data;\n});\n\n// Thunk pour récupérer le profil de l'utilisateur\nexport const fetchUserProfile = createAsyncThunk(\"auth/fetchUserProfile\", async (_, {\n  getState\n}) => {\n  const accessToken = getState().auth.accessToken;\n  const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Erreur lors de la récupération du profil de l'utilisateur\");\n  }\n  const data = await response.json();\n  return data.email;\n});\n\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n*/","map":{"version":3,"names":["createSlice","createAsyncThunk","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","token","localStorage","setItem","fetchUserProfile","_","getState","accessToken","auth","Authorization"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/actions/authActions.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la connexion\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    //affichage du jeton d'authentification (token)\r\n    const token = data.token;\r\n    localStorage.setItem(\"accessToken\", token); // stockage du jeton\r\n    return data;\r\n  }\r\n);\r\n\r\n// Thunk pour récupérer le profil de l'utilisateur\r\nexport const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const accessToken = getState().auth.accessToken;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.email;\r\n  }\r\n);\r\n\r\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n*/\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,KAAK,GAAGD,gBAAgB,CACnC,YAAY,EACZ,OAAO;EAAEE,KAAK;EAAEC;AAAS,CAAC,KAAK;EAC7B;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;IACtEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAClC;EACA,MAAMC,KAAK,GAAGF,IAAI,CAACE,KAAK;EACxBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,KAAK,CAAC,CAAC,CAAC;EAC5C,OAAOF,IAAI;AACb,CACF,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAGlB,gBAAgB,CAC9C,uBAAuB,EACvB,OAAOmB,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACzB,MAAMC,WAAW,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,WAAW;EAE/C,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;IACxEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCgB,aAAa,EAAG,UAASF,WAAY;IACvC;EACF,CAAC,CAAC;EAEF,IAAI,CAACjB,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CACb,2DACF,CAAC;EACH;EAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACX,KAAK;AACnB,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
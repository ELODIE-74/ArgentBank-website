{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { signIn, signOut } from \"../actions/authActions\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Définition de l'état initial du Slice\nconst initialState = {\n  user: null,\n  loading: false,\n  error: null\n};\n\n// Création du Slice \"auth\" avec les reducers\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n    _s2(_s(builder\n    // Gestion de l'action signIn.pending\n    .addCase(signIn.pending, state => {\n      state.loading = true;\n      state.error = null;\n    })\n    // Gestion de l'action signIn.fulfilled\n    .addCase(signIn.fulfilled, _s((state, action) => {\n      _s();\n      state.loading = false;\n      state.user = action.payload;\n      const navigate = useNavigate();\n      navigate(\"/user\"); // Redirigez l'utilisateur vers la page de profil\n    }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n      return [useNavigate];\n    })), \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n      return [useNavigate];\n    }) // Gestion de l'action signIn.rejected\n    .addCase(signIn.rejected, (state, action) => {\n      state.loading = false;\n      state.error = {\n        status: action.payload.status,\n        message: action.payload.message\n      };\n    })\n    // Gestion de l'action signOut.fulfilled\n    .addCase(signOut.fulfilled, _s2(state => {\n      _s2();\n      state.user = null;\n      const navigate = useNavigate();\n      navigate(\"/login\"); // Redirigez l'utilisateur vers la page de connexion\n    }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n      return [useNavigate];\n    })), \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n      return [useNavigate];\n    });\n  }\n});\nexport default authSlice.reducer;\n\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { signIn, signOut } from \"../actions/authActions\";\r\n\r\n// Définition de l'état initial du Slice\r\nconst initialState = {\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Création du Slice \"auth\" avec les reducers\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Gestion de l'action signIn.pending\r\n      .addCase(signIn.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      // Gestion de l'action signIn.fulfilled\r\n      .addCase(signIn.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      // Gestion de l'action signIn.rejected\r\n      .addCase(signIn.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = {\r\n          status: action.payload.status,\r\n          message: action.payload.message,\r\n        };\r\n      })\r\n      // Gestion de l'action signOut.fulfilled\r\n      .addCase(signOut.fulfilled, (state) => {\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\n*/","map":{"version":3,"names":["createSlice","signIn","signOut","useNavigate","initialState","user","loading","error","authSlice","name","reducers","extraReducers","builder","_s","$RefreshSig$","_s2","addCase","pending","state","fulfilled","action","payload","navigate","rejected","status","message","reducer"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/reducers/authReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { signIn, signOut } from \"../actions/authActions\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Définition de l'état initial du Slice\r\nconst initialState = {\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Création du Slice \"auth\" avec les reducers\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Gestion de l'action signIn.pending\r\n      .addCase(signIn.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      // Gestion de l'action signIn.fulfilled\r\n      .addCase(signIn.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n        const navigate = useNavigate();\r\n        navigate(\"/user\"); // Redirigez l'utilisateur vers la page de profil\r\n      })\r\n      // Gestion de l'action signIn.rejected\r\n      .addCase(signIn.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = {\r\n          status: action.payload.status,\r\n          message: action.payload.message,\r\n        };\r\n      })\r\n      // Gestion de l'action signOut.fulfilled\r\n      .addCase(signOut.fulfilled, (state) => {\r\n        state.user = null;\r\n        const navigate = useNavigate();\r\n        navigate(\"/login\"); // Redirigez l'utilisateur vers la page de connexion\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\n\r\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { signIn, signOut } from \"../actions/authActions\";\r\n\r\n// Définition de l'état initial du Slice\r\nconst initialState = {\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Création du Slice \"auth\" avec les reducers\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Gestion de l'action signIn.pending\r\n      .addCase(signIn.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      // Gestion de l'action signIn.fulfilled\r\n      .addCase(signIn.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      // Gestion de l'action signIn.rejected\r\n      .addCase(signIn.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = {\r\n          status: action.payload.status,\r\n          message: action.payload.message,\r\n        };\r\n      })\r\n      // Gestion de l'action signOut.fulfilled\r\n      .addCase(signOut.fulfilled, (state) => {\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\n*/\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,EAAEC,OAAO,QAAQ,wBAAwB;AACxD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAAA,IAAAC,EAAA,GAAAC,YAAA;MAAAC,GAAA,GAAAD,YAAA;IAC1BC,GAAA,CAAAF,EAAA,CAAAD;IACE;IAAA,CACCI,OAAO,CAACf,MAAM,CAACgB,OAAO,EAAGC,KAAK,IAAK;MAClCA,KAAK,CAACZ,OAAO,GAAG,IAAI;MACpBY,KAAK,CAACX,KAAK,GAAG,IAAI;IACpB,CAAC;IACD;IAAA,CACCS,OAAO,CAACf,MAAM,CAACkB,SAAS,EAAAN,EAAA,CAAE,CAACK,KAAK,EAAEE,MAAM,KAAK;MAAAP,EAAA;MAC5CK,KAAK,CAACZ,OAAO,GAAG,KAAK;MACrBY,KAAK,CAACb,IAAI,GAAGe,MAAM,CAACC,OAAO;MAC3B,MAAMC,QAAQ,GAAGnB,WAAW,CAAC,CAAC;MAC9BmB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACrB,CAAC;MAAA,QAFkBnB,WAAW;IAAA,EAE7B,CAAC;MAAA,QAFiBA,WAAW;IAAA,GAG9B;IAAA,CACCa,OAAO,CAACf,MAAM,CAACsB,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAACZ,OAAO,GAAG,KAAK;MACrBY,KAAK,CAACX,KAAK,GAAG;QACZiB,MAAM,EAAEJ,MAAM,CAACC,OAAO,CAACG,MAAM;QAC7BC,OAAO,EAAEL,MAAM,CAACC,OAAO,CAACI;MAC1B,CAAC;IACH,CAAC;IACD;IAAA,CACCT,OAAO,CAACd,OAAO,CAACiB,SAAS,EAAAJ,GAAA,CAAGG,KAAK,IAAK;MAAAH,GAAA;MACrCG,KAAK,CAACb,IAAI,GAAG,IAAI;MACjB,MAAMiB,QAAQ,GAAGnB,WAAW,CAAC,CAAC;MAC9BmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtB,CAAC;MAAA,QAFkBnB,WAAW;IAAA,EAE7B,CAAC;MAAA,QAFiBA,WAAW;IAAA;EAGlC;AACF,CAAC,CAAC;AAEF,eAAeK,SAAS,CAACkB,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
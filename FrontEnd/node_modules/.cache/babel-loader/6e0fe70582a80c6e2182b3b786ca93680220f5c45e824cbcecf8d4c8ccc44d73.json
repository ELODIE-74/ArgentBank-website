{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { login } from \"../actions/authActions\";\n// Importez l'action 'login'\nimport { fetchUserProfile } from \"../actions/authActions\";\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    accessToken: localStorage.getItem(\"accessToken\") || null,\n    // Récupère le token du localStorage s'il existe\n    username: null,\n    status: \"idle\",\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.accessToken = null;\n      state.username = null;\n      localStorage.removeItem(\"accessToken\");\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.fulfilled, (state, action) => {\n      state.accessToken = action.payload.token;\n      state.status = \"succeeded\";\n      state.user = action.payload.user;\n    }).addCase(login.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }).addCase(fetchUserProfile.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchUserProfile.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.username = action.payload.username;\n      state.accessToken = localStorage.getItem(\"accessToken\"); // Met à jour l'accessToken depuis le localStorage\n    }).addCase(fetchUserProfile.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    });\n  }\n});\nexport default authSlice.reducer;\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/","map":{"version":3,"names":["createSlice","login","fetchUserProfile","authSlice","name","initialState","accessToken","localStorage","getItem","username","status","error","reducers","logout","state","removeItem","extraReducers","builder","addCase","fulfilled","action","payload","token","user","rejected","message","pending","reducer"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/reducers/authReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { login } from \"../actions/authActions\";\r\n// Importez l'action 'login'\r\nimport { fetchUserProfile } from \"../actions/authActions\";\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    accessToken: localStorage.getItem(\"accessToken\") || null, // Récupère le token du localStorage s'il existe\r\n    username: null,\r\n    status: \"idle\",\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.accessToken = null;\r\n      state.username = null;\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.token;\r\n        state.status = \"succeeded\";\r\n        state.user = action.payload.user;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.username = action.payload.username;\r\n        state.accessToken = localStorage.getItem(\"accessToken\"); // Met à jour l'accessToken depuis le localStorage\r\n      })\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\nexport default authSlice.reducer;\r\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,wBAAwB;AAC9C;AACA,SAASC,gBAAgB,QAAQ,wBAAwB;AAEzD,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,WAAW,EAAEC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI;IAAE;IAC1DC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACR,WAAW,GAAG,IAAI;MACxBQ,KAAK,CAACL,QAAQ,GAAG,IAAI;MACrBF,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;IACxC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACjB,KAAK,CAACkB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC3CN,KAAK,CAACR,WAAW,GAAGc,MAAM,CAACC,OAAO,CAACC,KAAK;MACxCR,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACS,IAAI,GAAGH,MAAM,CAACC,OAAO,CAACE,IAAI;IAClC,CAAC,CAAC,CACDL,OAAO,CAACjB,KAAK,CAACuB,QAAQ,EAAE,CAACV,KAAK,EAAEM,MAAM,KAAK;MAC1CN,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGS,MAAM,CAACT,KAAK,CAACc,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAAChB,gBAAgB,CAACwB,OAAO,EAAGZ,KAAK,IAAK;MAC5CA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDQ,OAAO,CAAChB,gBAAgB,CAACiB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACtDN,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,QAAQ,GAAGW,MAAM,CAACC,OAAO,CAACZ,QAAQ;MACxCK,KAAK,CAACR,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CACDU,OAAO,CAAChB,gBAAgB,CAACsB,QAAQ,EAAE,CAACV,KAAK,EAAEM,MAAM,KAAK;MACrDN,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGS,MAAM,CAACT,KAAK,CAACc,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AACF,eAAetB,SAAS,CAACwB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
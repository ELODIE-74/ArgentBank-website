{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { login, fetchUserProfile } from \"../actions/authActions\"; // Assurez-vous que l'importation est correcte\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    accessToken: null,\n    username: null,\n    status: \"idle\",\n    // C'est l'état initial avant que l'action asynchrone ne soit déclenchée.\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.accessToken = null;\n      state.username = null; // Corrigez l'erreur ici\n      localStorage.removeItem(\"accessToken\");\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.fulfilled, (state, action) => {\n      state.accessToken = action.payload.token;\n      state.status = \"succeeded\";\n      state.username = action.payload.username; // Assurez-vous que la structure de l'objet payload est correcte\n    }).addCase(login.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }).addCase(fetchUserProfile.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchUserProfile.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.username = action.payload.username;\n    }).addCase(fetchUserProfile.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    });\n  }\n});\nexport default authSlice.reducer;\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { login } from \"../actions/authActions\";\r\n// Importez l'action 'login'\r\nimport { fetchUserProfile } from \"../actions/authActions\";\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    accessToken: null,\r\n    username: null,\r\n    status: \"idle\", //C'est l'état initial avant que l'action asynchrone ne soit déclenchée.\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.accessToken = null;\r\n      state.username = email;\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.token;\r\n        state.status = \"succeeded\";\r\n        state.user = action.payload.user;\r\n      })\r\n\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.username = action.payload.username;\r\n      })\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/","map":{"version":3,"names":["createSlice","login","fetchUserProfile","authSlice","name","initialState","accessToken","username","status","error","reducers","logout","state","localStorage","removeItem","extraReducers","builder","addCase","fulfilled","action","payload","token","rejected","message","pending","reducer"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/reducers/authReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { login, fetchUserProfile } from \"../actions/authActions\"; // Assurez-vous que l'importation est correcte\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    accessToken: null,\r\n    username: null,\r\n    status: \"idle\", // C'est l'état initial avant que l'action asynchrone ne soit déclenchée.\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.accessToken = null;\r\n      state.username = null; // Corrigez l'erreur ici\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.token;\r\n        state.status = \"succeeded\";\r\n        state.username = action.payload.username; // Assurez-vous que la structure de l'objet payload est correcte\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.username = action.payload.username;\r\n      })\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { login } from \"../actions/authActions\";\r\n// Importez l'action 'login'\r\nimport { fetchUserProfile } from \"../actions/authActions\";\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    accessToken: null,\r\n    username: null,\r\n    status: \"idle\", //C'est l'état initial avant que l'action asynchrone ne soit déclenchée.\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.accessToken = null;\r\n      state.username = email;\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.token;\r\n        state.status = \"succeeded\";\r\n        state.user = action.payload.user;\r\n      })\r\n\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.username = action.payload.username;\r\n      })\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\r\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,EAAEC,gBAAgB,QAAQ,wBAAwB,CAAC,CAAC;;AAElE,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,WAAW,EAAE,IAAI;IACjBC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE,MAAM;IAAE;IAChBC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACN,WAAW,GAAG,IAAI;MACxBM,KAAK,CAACL,QAAQ,GAAG,IAAI,CAAC,CAAC;MACvBM,YAAY,CAACC,UAAU,CAAC,aAAa,CAAC;IACxC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,KAAK,CAACiB,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC3CP,KAAK,CAACN,WAAW,GAAGa,MAAM,CAACC,OAAO,CAACC,KAAK;MACxCT,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,QAAQ,GAAGY,MAAM,CAACC,OAAO,CAACb,QAAQ,CAAC,CAAC;IAC5C,CAAC,CAAC,CACDU,OAAO,CAAChB,KAAK,CAACqB,QAAQ,EAAE,CAACV,KAAK,EAAEO,MAAM,KAAK;MAC1CP,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGU,MAAM,CAACV,KAAK,CAACc,OAAO;IACpC,CAAC,CAAC,CACDN,OAAO,CAACf,gBAAgB,CAACsB,OAAO,EAAGZ,KAAK,IAAK;MAC5CA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDS,OAAO,CAACf,gBAAgB,CAACgB,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACtDP,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,QAAQ,GAAGY,MAAM,CAACC,OAAO,CAACb,QAAQ;IAC1C,CAAC,CAAC,CACDU,OAAO,CAACf,gBAAgB,CAACoB,QAAQ,EAAE,CAACV,KAAK,EAAEO,MAAM,KAAK;MACrDP,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGU,MAAM,CAACV,KAAK,CAACc,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAepB,SAAS,CAACsB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// actions/updateprofilAction.js\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const UPDATE_USER_PROFILE_START = \"UPDATE_USER_PROFILE_START\"; // début de requête de mse à jour (demande d'envoi)\nexport const UPDATE_USER_PROFILE_SUCCESS = \"UPDATE_USER_PROFILE_SUCCESS\"; // si  réponse API retourne OK = success\nexport const UPDATE_USER_PROFILE_ERROR = \"UPDATE_USER_PROFILE_ERROR\"; // gestion des erreurs dans la requête en cas d'échec\n\n// Action asynchrone pour la mise à jour du profil de l'utilisateur\nexport const updateUserProfile = createAsyncThunk(\"user/updateProfile\", async (updatedUserInfo, thunkAPI) => {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profil\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedUserInfo)\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      return thunkAPI.rejectWithValue({\n        erreur: error.value\n      });\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      erreur: error.message\n    });\n  }\n});\n\n//mettre une méthode asynchrone pour mieux gérer les promesses, début de requête\n/*export const updateUserProfile = (updatedUserInfo) => async (dispatch) => {\r\n  dispatch({ type: UPDATE_USER_PROFILE_START });\r\n\r\n  try {\r\n    // Appel API pour mettre à jour le profil de l'utilisateur\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profil\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedUserInfo),\r\n    });\r\n    //si la réponse n'est pas correcte, gestion de l'erreur et affichage du message\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la mise à jour du profil\");\r\n    }\r\n    //si ok réussi, mise a jour et envoie des nouvelles données\r\n    //mettre un message de confirmation d'envoi réussi pour l'utlisateur\r\n    const data = await response.json();\r\n    dispatch({ type: UPDATE_USER_PROFILE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: UPDATE_USER_PROFILE_ERROR, payload: error.message });\r\n  }\r\n};*/","map":{"version":3,"names":["createAsyncThunk","UPDATE_USER_PROFILE_START","UPDATE_USER_PROFILE_SUCCESS","UPDATE_USER_PROFILE_ERROR","updateUserProfile","updatedUserInfo","thunkAPI","response","fetch","method","headers","body","JSON","stringify","ok","error","json","rejectWithValue","erreur","value","data","message"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/actions/updateprofileAction.js"],"sourcesContent":["// actions/updateprofilAction.js\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const UPDATE_USER_PROFILE_START = \"UPDATE_USER_PROFILE_START\"; // début de requête de mse à jour (demande d'envoi)\r\nexport const UPDATE_USER_PROFILE_SUCCESS = \"UPDATE_USER_PROFILE_SUCCESS\"; // si  réponse API retourne OK = success\r\nexport const UPDATE_USER_PROFILE_ERROR = \"UPDATE_USER_PROFILE_ERROR\"; // gestion des erreurs dans la requête en cas d'échec\r\n\r\n// Action asynchrone pour la mise à jour du profil de l'utilisateur\r\nexport const updateUserProfile = createAsyncThunk(\r\n  \"user/updateProfile\",\r\n  async (updatedUserInfo, thunkAPI) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/profil\", {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(updatedUserInfo),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        return thunkAPI.rejectWithValue({ erreur: error.value });\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue({ erreur: error.message });\r\n    }\r\n  }\r\n);\r\n\r\n//mettre une méthode asynchrone pour mieux gérer les promesses, début de requête\r\n/*export const updateUserProfile = (updatedUserInfo) => async (dispatch) => {\r\n  dispatch({ type: UPDATE_USER_PROFILE_START });\r\n\r\n  try {\r\n    // Appel API pour mettre à jour le profil de l'utilisateur\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profil\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedUserInfo),\r\n    });\r\n    //si la réponse n'est pas correcte, gestion de l'erreur et affichage du message\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la mise à jour du profil\");\r\n    }\r\n    //si ok réussi, mise a jour et envoie des nouvelles données\r\n    //mettre un message de confirmation d'envoi réussi pour l'utlisateur\r\n    const data = await response.json();\r\n    dispatch({ type: UPDATE_USER_PROFILE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: UPDATE_USER_PROFILE_ERROR, payload: error.message });\r\n  }\r\n};*/\r\n"],"mappings":"AAAA;AACA,SAASA,gBAAgB,QAAQ,kBAAkB;AAEnD,OAAO,MAAMC,yBAAyB,GAAG,2BAA2B,CAAC,CAAC;AACtE,OAAO,MAAMC,2BAA2B,GAAG,6BAA6B,CAAC,CAAC;AAC1E,OAAO,MAAMC,yBAAyB,GAAG,2BAA2B,CAAC,CAAC;;AAEtE;AACA,OAAO,MAAMC,iBAAiB,GAAGJ,gBAAgB,CAC/C,oBAAoB,EACpB,OAAOK,eAAe,EAAEC,QAAQ,KAAK;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MACvEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,eAAe;IACtC,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,OAAOV,QAAQ,CAACW,eAAe,CAAC;QAAEC,MAAM,EAAEH,KAAK,CAACI;MAAM,CAAC,CAAC;IAC1D;IAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOI,IAAI;EACb,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,OAAOT,QAAQ,CAACW,eAAe,CAAC;MAAEC,MAAM,EAAEH,KAAK,CAACM;IAAQ,CAAC,CAAC;EAC5D;AACF,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elodi\\\\OneDrive\\\\Documents\\\\ArgentBank-website\\\\FrontEnd\\\\src\\\\components\\\\signinfom\\\\signinform.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchUserProfile, login } from \"../../actions/authActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignInForm = () => {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [err, setError] = useState(\"\");\n  ////utilise useSelector pour récupérer l'état global de l'authentification (loading et error) depuis le store Redux.\n  const {\n    loading,\n    error\n  } = useSelector(state => state.auth);\n\n  //utilise useDispatch pour pouvoir dispatcher les actions Redux login et fetchUserProfile.\n  const dispatch = useDispatch();\n  //utilise useNavigate pour pouvoir rediriger l'utilisateur vers différentes pages en fonction du résultat de l'authentification.\n  const navigate = useNavigate();\n\n  /** fonction handleSubmit est asynchrone et utilise l'opérateur await pour attendre que les actions Redux\r\n   * login et fetchUserProfile soient terminées avant de rediriger l'utilisateur. */\n  const handleSubmit = async e => {\n    try {\n      e.preventDefault();\n\n      // Vérifier que les champs du formulaire sont remplis\n      if (!email || !password) {\n        throw new Error(\"Veuillez remplir tous les champs du formulaire.\");\n      }\n\n      // Vérifier que les valeurs sont valides (par exemple, que l'email a un format correct)\n      if (!isValidEmail(email) || !isValidPassword(password)) {\n        throw new Error(\"Veuillez entrer des valeurs valides.\");\n      }\n      await dispatch(login({\n        email,\n        password\n      }));\n      const accessToken = localStorage.getItem(\"accessToken\");\n      await dispatch(fetchUserProfile(accessToken));\n      navigate(\"/user\");\n    } catch (err) {\n      if (err.message === \"Veuillez remplir tous les champs du formulaire.\") {\n        // Afficher un message d'erreur spécifique aux champs vides\n        // et ne pas rediriger l'utilisateur\n        setError(err.message);\n      } else if (err.message === \"Veuillez entrer des valeurs valides.\") {\n        // Afficher un message d'erreur spécifique aux valeurs incorrectes\n        // et ne pas rediriger l'utilisateur\n        setError(err.message);\n      } else {\n        // Rediriger l'utilisateur vers \"/error404\" pour toute autre erreur\n        navigate(\"/error404\");\n      }\n    }\n  };\n\n  // Fonctions de validation\n  function isValidEmail(email) {\n    // Ajouter votre logique de validation de l'email ici\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  }\n  function isValidPassword(password) {\n    // Ajouter votre logique de validation du mot de passe ici\n    return password.length >= 8;\n  }\n\n  /*const handleSubmit = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      await dispatch(login({ email, password }));\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      await dispatch(fetchUserProfile(accessToken));\r\n      navigate(\"/user\");\r\n    } catch (err) {\r\n      //En cas d'erreur, l'utilisateur est redirigé vers la page \"/error\".\r\n      navigate(\"/error404\");\r\n    }\r\n  };*/\n\n  //Affichage du formulaire\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"sign-in-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fa fa-user-circle sign-in-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-remember\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"remember-me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"remember-me\",\n          children: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"sign-in-button\",\n        disabled: loading,\n        children: loading ? \"Loading...\" : \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(SignInForm, \"dxyElqGYxNYIIhMiCy8cGhtyT6I=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n_c = SignInForm;\nexport default SignInForm;\n/*Cette version utilise des promesses au lieu d'être asynchrone.\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(login({ email, password }))\r\n      .then((data) => {\r\n        // Récupération du token depuis le payload lors de l'authentification\r\n        const accessToken = data.body.token;\r\n        dispatch(fetchUserProfile(accessToken)).then(() => {\r\n          return navigate(\"/user\");\r\n        });\r\n      })\r\n\r\n      .catch((error) => {\r\n        navigate(\"/error404\"); // Gérer les erreurs de connexion\r\n      });\r\n  };*/\nvar _c;\n$RefreshReg$(_c, \"SignInForm\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","useNavigate","fetchUserProfile","login","jsxDEV","_jsxDEV","SignInForm","_s","email","setEmail","password","setPassword","err","setError","loading","error","state","auth","dispatch","navigate","handleSubmit","e","preventDefault","Error","isValidEmail","isValidPassword","accessToken","localStorage","getItem","message","test","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","disabled","_c","$RefreshReg$"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/components/signinfom/signinform.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { fetchUserProfile, login } from \"../../actions/authActions\";\r\n\r\nconst SignInForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [err, setError] = useState(\"\");\r\n  ////utilise useSelector pour récupérer l'état global de l'authentification (loading et error) depuis le store Redux.\r\n  const { loading, error } = useSelector((state) => state.auth);\r\n\r\n  //utilise useDispatch pour pouvoir dispatcher les actions Redux login et fetchUserProfile.\r\n  const dispatch = useDispatch();\r\n  //utilise useNavigate pour pouvoir rediriger l'utilisateur vers différentes pages en fonction du résultat de l'authentification.\r\n  const navigate = useNavigate();\r\n\r\n  /** fonction handleSubmit est asynchrone et utilise l'opérateur await pour attendre que les actions Redux\r\n   * login et fetchUserProfile soient terminées avant de rediriger l'utilisateur. */\r\n  const handleSubmit = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n\r\n      // Vérifier que les champs du formulaire sont remplis\r\n      if (!email || !password) {\r\n        throw new Error(\"Veuillez remplir tous les champs du formulaire.\");\r\n      }\r\n\r\n      // Vérifier que les valeurs sont valides (par exemple, que l'email a un format correct)\r\n      if (!isValidEmail(email) || !isValidPassword(password)) {\r\n        throw new Error(\"Veuillez entrer des valeurs valides.\");\r\n      }\r\n\r\n      await dispatch(login({ email, password }));\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      await dispatch(fetchUserProfile(accessToken));\r\n      navigate(\"/user\");\r\n    } catch (err) {\r\n      if (err.message === \"Veuillez remplir tous les champs du formulaire.\") {\r\n        // Afficher un message d'erreur spécifique aux champs vides\r\n        // et ne pas rediriger l'utilisateur\r\n        setError(err.message);\r\n      } else if (err.message === \"Veuillez entrer des valeurs valides.\") {\r\n        // Afficher un message d'erreur spécifique aux valeurs incorrectes\r\n        // et ne pas rediriger l'utilisateur\r\n        setError(err.message);\r\n      } else {\r\n        // Rediriger l'utilisateur vers \"/error404\" pour toute autre erreur\r\n        navigate(\"/error404\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Fonctions de validation\r\n  function isValidEmail(email) {\r\n    // Ajouter votre logique de validation de l'email ici\r\n    return /\\S+@\\S+\\.\\S+/.test(email);\r\n  }\r\n\r\n  function isValidPassword(password) {\r\n    // Ajouter votre logique de validation du mot de passe ici\r\n    return password.length >= 8;\r\n  }\r\n\r\n  /*const handleSubmit = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      await dispatch(login({ email, password }));\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      await dispatch(fetchUserProfile(accessToken));\r\n      navigate(\"/user\");\r\n    } catch (err) {\r\n      //En cas d'erreur, l'utilisateur est redirigé vers la page \"/error\".\r\n      navigate(\"/error404\");\r\n    }\r\n  };*/\r\n\r\n  //Affichage du formulaire\r\n  return (\r\n    <section className=\"sign-in-content\">\r\n      <i className=\"fa fa-user-circle sign-in-icon\"></i>\r\n      <h1>Sign In</h1>\r\n      {error && <div className=\"error\">{error}</div>}\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"input-remember\">\r\n          <input type=\"checkbox\" id=\"remember-me\" />\r\n          <label htmlFor=\"remember-me\">Remember me</label>\r\n        </div>\r\n        <button type=\"submit\" className=\"sign-in-button\" disabled={loading}>\r\n          {loading ? \"Loading...\" : \"Sign In\"}\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SignInForm;\r\n/*Cette version utilise des promesses au lieu d'être asynchrone.\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(login({ email, password }))\r\n      .then((data) => {\r\n        // Récupération du token depuis le payload lors de l'authentification\r\n        const accessToken = data.body.token;\r\n        dispatch(fetchUserProfile(accessToken)).then(() => {\r\n          return navigate(\"/user\");\r\n        });\r\n      })\r\n\r\n      .catch((error) => {\r\n        navigate(\"/error404\"); // Gérer les erreurs de connexion\r\n      });\r\n  };*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"//fichier authActions\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const login = createAsyncThunk(\"auth/login\", async ({\n  email,\n  password\n}) => {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    const userData = await response.json();\n    return userData; // renvoie les données du profil utilisateur récupérées depuis l'API\n  } catch (error) {\n    throw new Error(error.message);\n  }\n});\nexport const fetchUserProfile = createAsyncThunk(\"auth/fetchUserProfile\", async () => {\n  const accessToken = localStorage.getItem(\"accessToken\");\n  if (!accessToken) {\n    throw new Error(\"Aucun jeton d'authentification trouvé\");\n  }\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    const userData = await response.json();\n    const {\n      email,\n      firstName,\n      lastName,\n      username\n    } = userData; // Extraction des données spécifiques du profil utilisateur\n    const userProfileData = {\n      email,\n      firstName,\n      lastName,\n      username\n      // Ajoutez d'autres propriétés du profil si nécessaires\n    };\n    return userProfileData; // Renvoie les données du profil utilisateur structurées\n  } catch (error) {\n    throw new Error(error.message);\n  }\n});\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la connexion\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    //affichage du jeton d'authentification (token)\r\n    const token = data.token;\r\n    localStorage.setItem(\"accessToken\", token); // stockage du jeton\r\n    return data;\r\n  }\r\n);\r\nexport const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async () => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    console.log(accessToken);\r\n    const response = await fetch(`http://localhost:3001/api/v1/user/profile`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n);*/\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, id } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ id }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\n\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, userName } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ userName }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\n\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n*/","map":{"version":3,"names":["createAsyncThunk","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","message","userData","fetchUserProfile","accessToken","localStorage","getItem","Authorization","firstName","lastName","username","userProfileData"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/actions/authActions.js"],"sourcesContent":["//fichier authActions\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message);\r\n      }\r\n      const userData = await response.json();\r\n      return userData; // renvoie les données du profil utilisateur récupérées depuis l'API\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async () => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    if (!accessToken) {\r\n      throw new Error(\"Aucun jeton d'authentification trouvé\");\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:3001/api/v1/user/profile\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      const userData = await response.json();\r\n      const { email, firstName, lastName, username } = userData; // Extraction des données spécifiques du profil utilisateur\r\n      const userProfileData = {\r\n        email,\r\n        firstName,\r\n        lastName,\r\n        username,\r\n        // Ajoutez d'autres propriétés du profil si nécessaires\r\n      };\r\n      return userProfileData; // Renvoie les données du profil utilisateur structurées\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  }\r\n);\r\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la connexion\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    //affichage du jeton d'authentification (token)\r\n    const token = data.token;\r\n    localStorage.setItem(\"accessToken\", token); // stockage du jeton\r\n    return data;\r\n  }\r\n);\r\nexport const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async () => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    console.log(accessToken);\r\n    const response = await fetch(`http://localhost:3001/api/v1/user/profile`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n);*/\r\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, id } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ id }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\r\n\r\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, userName } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ userName }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\r\n\r\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n*/\r\n"],"mappings":"AAAA;AACA,SAASA,gBAAgB,QAAQ,kBAAkB;AAEnD,OAAO,MAAMC,KAAK,GAAGD,gBAAgB,CACnC,YAAY,EACZ,OAAO;EAAEE,KAAK;EAAEC;AAAS,CAAC,KAAK;EAC7B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;IAChC;IACA,MAAMC,QAAQ,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IACtC,OAAOG,QAAQ,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,MAAM,IAAIE,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;EAChC;AACF,CACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAGjB,gBAAgB,CAC9C,uBAAuB,EACvB,YAAY;EACV,MAAMkB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,IAAI,CAACF,WAAW,EAAE;IAChB,MAAM,IAAIJ,KAAK,CAAC,uCAAuC,CAAC;EAC1D;EAEA,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAC1B,2CAA2C,EAC3C;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCc,aAAa,EAAG,UAASH,WAAY;MACvC;IACF,CACF,CAAC;IAED,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;IAChC;IAEA,MAAMC,QAAQ,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IACtC,MAAM;MAAEX,KAAK;MAAEoB,SAAS;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGR,QAAQ,CAAC,CAAC;IAC3D,MAAMS,eAAe,GAAG;MACtBvB,KAAK;MACLoB,SAAS;MACTC,QAAQ;MACRC;MACA;IACF,CAAC;IACD,OAAOC,eAAe,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOb,KAAK,EAAE;IACd,MAAM,IAAIE,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;EAChC;AACF,CACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elodi\\\\OneDrive\\\\Documents\\\\ArgentBank-website\\\\FrontEnd\\\\src\\\\components\\\\headeruser\\\\headeruser.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport EditUserInfo from \"../../components/EditUserInfo/EditUserInfo\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchUserProfile, updateUsername } from \"../../actions/authActions\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  _s();\n  const [showEditUserInfo, setShowEditUserInfo] = useState(false);\n  const {\n    userProfile,\n    accessToken\n  } = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n  const handleEditNameClick = () => {\n    setShowEditUserInfo(true);\n  };\n  useEffect(() => {\n    if (accessToken) {\n      dispatch(fetchUserProfile(accessToken));\n    }\n  }, [dispatch, accessToken]);\n  console.log(userProfile); // Ajout de cette ligne pour afficher le contenu de userProfile\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: userProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome back\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), userProfile.userName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-button\",\n        onClick: handleEditNameClick,\n        children: \"Edit name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), showEditUserInfo && /*#__PURE__*/_jsxDEV(EditUserInfo, {\n        userProfile: userProfile,\n        setShowEditUserInfo: setShowEditUserInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(Header, \"Zapo6snmUo7WRcNND0dvS5VVN8A=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Header;\nexport default Header;\n\n/*import React, { useState, useEffect } from \"react\";\r\nimport EditUserInfo from \"../../components/EditUserInfo/EditUserInfo\";\r\n//import des hooks useSelector et useDispatch de Redux, qui permettent d'accéder à l'état global de l'application et de déclencher des actions.\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n//importe l'action fetchUserProfile depuis le fichier authActions.js.\r\nimport { fetchUserProfile, updateUsername } from \"../../actions/authActions\";\r\n\r\nfunction Header() {\r\n  //code initialise un état local avec le hook useState. showEditUserInfo est utilisé pour contrôler l'affichage du composant EditUserInfo.\r\n  const [showEditUserInfo, setShowEditUserInfo] = useState(false);\r\n  //code utilise le hook useSelector pour extraire les propriétés userProfile et accessToken de l'état global de l'application (stocké dans le store Redux).\r\n  const { userProfile, accessToken } = useSelector((state) => state.auth);\r\n  //code utilise le hook useDispatch pour obtenir une référence à la fonction dispatch de Redux, qui permet de déclencher des actions.\r\n  const dispatch = useDispatch();\r\n\r\n  /*fonction est appelée lorsque l'utilisateur clique sur le bouton \"Edit name\". \r\n  Elle définit la valeur de showEditUserInfo à true pour afficher le composant EditUserInfo.*/\n/*const handleEditNameClick = () => {\r\n    setShowEditUserInfo(true);\r\n  };\r\n\r\n  /**hook useEffect est appelé lorsque le composant est monté ou que les dépendances dispatch ou accessToken changent.\r\n   * Il déclenche l'action fetchUserProfile avec le accessToken pour récupérer le profil de l'utilisateur. */\n/*useEffect(() => {\r\n    if (accessToken) {\r\n      dispatch(fetchUserProfile(accessToken));\r\n    }\r\n  }, [dispatch, accessToken]);\r\n  console.log(userProfile); // Ajout de cette ligne pour afficher le contenu de userProfile\r\n\r\n  /**{userProfile ? = Si userProfile existe, le composant affiche un message de bienvenue avec le nom de l'utilisateur,\r\n   * un bouton \"Edit name\" et le composant EditUserInfo si showEditUserInfo est vrai.\r\n   * Si userProfile est null, le composant affiche un message \"Loading...\".*/\n/*return (\r\n    <div className=\"header\">\r\n      {userProfile ? (\r\n        <>\r\n          <h1>\r\n            Welcome back\r\n            <br />\r\n            {userProfile.userName}\r\n          </h1>\r\n          <button className=\"edit-button\" onClick={handleEditNameClick}>\r\n            Edit name\r\n          </button>\r\n          <EditUserInfo\r\n            showEditUserInfo={showEditUserInfo}\r\n            setShowEditUserInfo={setShowEditUserInfo}\r\n          />\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","useEffect","EditUserInfo","useSelector","useDispatch","fetchUserProfile","updateUsername","jsxDEV","_jsxDEV","Fragment","_Fragment","Header","_s","showEditUserInfo","setShowEditUserInfo","userProfile","accessToken","state","auth","dispatch","handleEditNameClick","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userName","onClick","_c","$RefreshReg$"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/components/headeruser/headeruser.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport EditUserInfo from \"../../components/EditUserInfo/EditUserInfo\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchUserProfile, updateUsername } from \"../../actions/authActions\";\r\n\r\nfunction Header() {\r\n  const [showEditUserInfo, setShowEditUserInfo] = useState(false);\r\n  const { userProfile, accessToken } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleEditNameClick = () => {\r\n    setShowEditUserInfo(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (accessToken) {\r\n      dispatch(fetchUserProfile(accessToken));\r\n    }\r\n  }, [dispatch, accessToken]);\r\n\r\n  console.log(userProfile); // Ajout de cette ligne pour afficher le contenu de userProfile\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      {userProfile ? (\r\n        <>\r\n          <h1>\r\n            Welcome back\r\n            <br />\r\n            {userProfile.userName}\r\n          </h1>\r\n          <button className=\"edit-button\" onClick={handleEditNameClick}>\r\n            Edit name\r\n          </button>\r\n          {showEditUserInfo && (\r\n            <EditUserInfo\r\n              userProfile={userProfile}\r\n              setShowEditUserInfo={setShowEditUserInfo}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n\r\n/*import React, { useState, useEffect } from \"react\";\r\nimport EditUserInfo from \"../../components/EditUserInfo/EditUserInfo\";\r\n//import des hooks useSelector et useDispatch de Redux, qui permettent d'accéder à l'état global de l'application et de déclencher des actions.\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n//importe l'action fetchUserProfile depuis le fichier authActions.js.\r\nimport { fetchUserProfile, updateUsername } from \"../../actions/authActions\";\r\n\r\nfunction Header() {\r\n  //code initialise un état local avec le hook useState. showEditUserInfo est utilisé pour contrôler l'affichage du composant EditUserInfo.\r\n  const [showEditUserInfo, setShowEditUserInfo] = useState(false);\r\n  //code utilise le hook useSelector pour extraire les propriétés userProfile et accessToken de l'état global de l'application (stocké dans le store Redux).\r\n  const { userProfile, accessToken } = useSelector((state) => state.auth);\r\n  //code utilise le hook useDispatch pour obtenir une référence à la fonction dispatch de Redux, qui permet de déclencher des actions.\r\n  const dispatch = useDispatch();\r\n\r\n  /*fonction est appelée lorsque l'utilisateur clique sur le bouton \"Edit name\". \r\n  Elle définit la valeur de showEditUserInfo à true pour afficher le composant EditUserInfo.*/\r\n/*const handleEditNameClick = () => {\r\n    setShowEditUserInfo(true);\r\n  };\r\n\r\n  /**hook useEffect est appelé lorsque le composant est monté ou que les dépendances dispatch ou accessToken changent.\r\n   * Il déclenche l'action fetchUserProfile avec le accessToken pour récupérer le profil de l'utilisateur. */\r\n/*useEffect(() => {\r\n    if (accessToken) {\r\n      dispatch(fetchUserProfile(accessToken));\r\n    }\r\n  }, [dispatch, accessToken]);\r\n  console.log(userProfile); // Ajout de cette ligne pour afficher le contenu de userProfile\r\n\r\n  /**{userProfile ? = Si userProfile existe, le composant affiche un message de bienvenue avec le nom de l'utilisateur,\r\n   * un bouton \"Edit name\" et le composant EditUserInfo si showEditUserInfo est vrai.\r\n   * Si userProfile est null, le composant affiche un message \"Loading...\".*/\r\n/*return (\r\n    <div className=\"header\">\r\n      {userProfile ? (\r\n        <>\r\n          <h1>\r\n            Welcome back\r\n            <br />\r\n            {userProfile.userName}\r\n          </h1>\r\n          <button className=\"edit-button\" onClick={handleEditNameClick}>\r\n            Edit name\r\n          </button>\r\n          <EditUserInfo\r\n            showEditUserInfo={showEditUserInfo}\r\n            setShowEditUserInfo={setShowEditUserInfo}\r\n          />\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n*/\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,4CAA4C;AACrE,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,EAAEC,cAAc,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7E,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM;IAAEe,WAAW;IAAEC;EAAY,CAAC,GAAGb,WAAW,CAAEc,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACvE,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAE9B,MAAMgB,mBAAmB,GAAGA,CAAA,KAAM;IAChCN,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd,IAAIe,WAAW,EAAE;MACfG,QAAQ,CAACd,gBAAgB,CAACW,WAAW,CAAC,CAAC;IACzC;EACF,CAAC,EAAE,CAACG,QAAQ,EAAEH,WAAW,CAAC,CAAC;EAE3BK,OAAO,CAACC,GAAG,CAACP,WAAW,CAAC,CAAC,CAAC;;EAE1B,oBACEP,OAAA;IAAKe,SAAS,EAAC,QAAQ;IAAAC,QAAA,EACpBT,WAAW,gBACVP,OAAA,CAAAE,SAAA;MAAAc,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,GAAI,cAEF,eAAAhB,OAAA;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACLb,WAAW,CAACc,QAAQ;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACLpB,OAAA;QAAQe,SAAS,EAAC,aAAa;QAACO,OAAO,EAAEV,mBAAoB;QAAAI,QAAA,EAAC;MAE9D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRf,gBAAgB,iBACfL,OAAA,CAACN,YAAY;QACXa,WAAW,EAAEA,WAAY;QACzBD,mBAAmB,EAAEA;MAAoB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CACF;IAAA,eACD,CAAC,gBAEHpB,OAAA;MAAAgB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CAzCQD,MAAM;EAAA,QAEwBR,WAAW,EAC/BC,WAAW;AAAA;AAAA2B,EAAA,GAHrBpB,MAAM;AA2Cf,eAAeA,MAAM;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
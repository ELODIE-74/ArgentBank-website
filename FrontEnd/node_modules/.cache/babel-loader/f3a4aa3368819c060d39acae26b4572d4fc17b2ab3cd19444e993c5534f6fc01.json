{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elodi\\\\OneDrive\\\\Documents\\\\ArgentBank-website\\\\FrontEnd\\\\src\\\\components\\\\EditUserInfo\\\\EditUserInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUserProfile } from \"../../actions/authActions\"; // Importez l'action pour récupérer le profil de l'utilisateur\nimport { updateUsername } from \"../../actions/authActions\"; // Importez la fonction d'action pour mettre à jour le nom d'utilisateur\nimport \"../EditUserInfo/EditUserinfo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditUserInfo = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    userProfile,\n    status\n  } = useSelector(state => state);\n  useEffect(() => {\n    dispatch(fetchUserProfile());\n  }, [dispatch]);\n\n  // Mise à jour des champs de formulaire avec les données du reducer\n\n  const handleUsernameChange = event => {\n    setUsername(event.target.value);\n  };\n  const handleSave = async () => {\n    try {\n      await updateUsername(userName);\n      setMessage(\"Informations enregistrées avec succès !\");\n    } catch (error) {\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\n    }\n  };\n  const handleCancel = () => {\n    setUsername((userProfile === null || userProfile === void 0 ? void 0 : userProfile.userName) || \"\");\n    setMessage(\"Modifications annulées.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"firstName\",\n        children: \"First Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"firstName\",\n        name: \"firstName\",\n        value: (userProfile === null || userProfile === void 0 ? void 0 : userProfile.firstName) || \"\",\n        disabled: status === \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lastName\",\n        children: \"Last Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"lastName\",\n        name: \"lastName\",\n        value: (userProfile === null || userProfile === void 0 ? void 0 : userProfile.lastName) || \"\",\n        disabled: status === \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userName\",\n        children: \"User Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userName\",\n        name: \"userName\",\n        value: (userProfile === null || userProfile === void 0 ? void 0 : userProfile.userName) || \"\",\n        disabled: status === \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-btn\",\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cancel-btn\",\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(EditUserInfo, \"/lTHLPlgTBa+qAnZMJgUHlfobi4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = EditUserInfo;\nexport default EditUserInfo;\n/*import React, { useState } from \"react\";\r\n\r\nimport { updateUsername } from \"../../actions/authActions\"; // Importez la fonction d'action pour mettre à jour le nom d'utilisateur\r\n\r\nconst EditUserInfo = () => {\r\n  const [userName, setUsername] = useState(\"\"); // Utilisation du hook useState pour créer des états locaux pour le nom d'utilisateur\r\n  const [firstName, setFirstName] = useState(\"\"); // Prénom est en lecture seule\r\n  const [lastName, setLastName] = useState(\"\"); // Nom est en lecture seule\r\n  const [message, setMessage] = useState(\"\"); // État local pour stocker le message de confirmation\r\n\r\n  // Définition de la fonction de rappel qui gère les changements de valeur du champ du nom d'utilisateur\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'enregistrement des données du formulaire\r\n  const handleSave = async () => {\r\n    try {\r\n      // Appel API pour mettre à jour le nom d'utilisateur\r\n      await updateUsername(userName);\r\n      setMessage(\"Informations enregistrées avec succès !\");\r\n    } catch (error) {\r\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\r\n    }\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'annulation des modifications du formulaire\r\n  const handleCancel = () => {\r\n    setUsername(\"\");\r\n    setMessage(\"Modifications annulées.\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"edit-user-info\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"userName\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"userName\"\r\n            value={userName}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <input type=\"text\" id=\"firstName\" value={firstName} disabled />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <input type=\"text\" id=\"lastName\" value={lastName} disabled />\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button className=\"save-btn\" onClick={handleSave}>\r\n            Save\r\n          </button>\r\n          <button className=\"cancel-btn\" onClick={handleCancel}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {message && <div className=\"message\">{message}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;*/\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\nimport { updateUsername } from \"../../actions/authActions\"; // Importez la fonction d'action pour mettre à jour le nom d'utilisateur\r\n\r\nconst EditUserInfo = () => {\r\n  const [username, setUsername] = useState(\"\"); // Utilisation du hook useState pour créer des états locaux pour le nom d'utilisateur\r\n  const [firstName, setFirstName] = useState(\"\"); // Prénom est en lecture seule\r\n  const [lastName, setLastName] = useState(\"\"); // Nom est en lecture seule\r\n  const [message, setMessage] = useState(\"\"); // État local pour stocker le message de confirmation\r\n\r\n  // Définition de la fonction de rappel qui gère les changements de valeur du champ du nom d'utilisateur\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'enregistrement des données du formulaire\r\n  const handleSave = async () => {\r\n    try {\r\n      // Appel API pour mettre à jour le nom d'utilisateur\r\n      await updateUsername(username);\r\n      setMessage(\"Informations enregistrées avec succès !\");\r\n    } catch (error) {\r\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\r\n    }\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'annulation des modifications du formulaire\r\n  const handleCancel = () => {\r\n    setUsername(\"\");\r\n    setMessage(\"Modifications annulées.\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"edit-user-info\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <input type=\"text\" id=\"firstName\" value={firstName} disabled />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <input type=\"text\" id=\"lastName\" value={lastName} disabled />\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button className=\"save-btn\" onClick={handleSave}>\r\n            Save\r\n          </button>\r\n          <button className=\"cancel-btn\" onClick={handleCancel}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {message && <div className=\"message\">{message}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;*/\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nconst EditUserInfo = () => {\r\n  const [username, setUsername] = useState(\"\"); //Utilisation du hook useState pour créer des états locaux pour le nom d'utilisateur, le prénom et le nom.\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n\r\n  //Définition de la fonction de rappel qui gère les changements de valeur du champ du nom d'utilisateur.\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n  //Définition de la fonction de rappel qui gère les changements de valeur du champ prénom.\r\n  const handleFirstNameChange = (event) => {\r\n    setFirstName(event.target.value);\r\n  };\r\n  //Définition de la fonction de rappel qui gère les changements de valeur du champ nom.\r\n  const handleLastNameChange = (event) => {\r\n    setLastName(event.target.value);\r\n  };\r\n  //Définition de la fonction de rappel qui gère l'enregistrement des données du formulaire.\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des données\r\n  };\r\n  //Définition de la fonction de rappel qui gère l'annulation des modifications du formulaire.\r\n  const handleCancel = () => {\r\n    // Réinitialiser les données du formulaire si nécessaire\r\n  };\r\n  //section contient le code JSX qui définit le rendu du composant.\r\n  /*Crée un champ de saisie de texte pour le nom d'utilisateur avec la valeur liée à l'état local username et \r\n  la fonction de rappel handleUsernameChange pour gérer les changements de valeur.*/\n/*return (\r\n    <div>\r\n      <div className=\"edit-user-info\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"firstName\"\r\n            value={firstName}\r\n            onChange={handleFirstNameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"lastName\"\r\n            value={lastName}\r\n            onChange={handleLastNameChange}\r\n          />\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button className=\"save-btn\" onClick={handleSave}>\r\n            Save\r\n          </button>\r\n          <button className=\"cancel-btn\" onClick={handleCancel}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;*/\nvar _c;\n$RefreshReg$(_c, \"EditUserInfo\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","fetchUserProfile","updateUsername","jsxDEV","_jsxDEV","EditUserInfo","_s","dispatch","userProfile","status","state","handleUsernameChange","event","setUsername","target","value","handleSave","userName","setMessage","error","handleCancel","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","firstName","disabled","lastName","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/components/EditUserInfo/EditUserInfo.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUserProfile } from \"../../actions/authActions\"; // Importez l'action pour récupérer le profil de l'utilisateur\r\nimport { updateUsername } from \"../../actions/authActions\"; // Importez la fonction d'action pour mettre à jour le nom d'utilisateur\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nconst EditUserInfo = () => {\r\n  const dispatch = useDispatch();\r\n  const { userProfile, status } = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUserProfile());\r\n  }, [dispatch]);\r\n\r\n  // Mise à jour des champs de formulaire avec les données du reducer\r\n\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      await updateUsername(userName);\r\n      setMessage(\"Informations enregistrées avec succès !\");\r\n    } catch (error) {\r\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setUsername(userProfile?.userName || \"\");\r\n    setMessage(\"Modifications annulées.\");\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <div>\r\n        <label htmlFor=\"firstName\">First Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"firstName\"\r\n          name=\"firstName\"\r\n          value={userProfile?.firstName || \"\"}\r\n          disabled={status === \"loading\"}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"lastName\">Last Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"lastName\"\r\n          name=\"lastName\"\r\n          value={userProfile?.lastName || \"\"}\r\n          disabled={status === \"loading\"}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"userName\">User Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"userName\"\r\n          name=\"userName\"\r\n          value={userProfile?.userName || \"\"}\r\n          disabled={status === \"loading\"}\r\n        />\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button className=\"save-btn\" onClick={handleSave}>\r\n          Save\r\n        </button>\r\n        <button className=\"cancel-btn\" onClick={handleCancel}>\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;\r\n/*import React, { useState } from \"react\";\r\n\r\nimport { updateUsername } from \"../../actions/authActions\"; // Importez la fonction d'action pour mettre à jour le nom d'utilisateur\r\n\r\nconst EditUserInfo = () => {\r\n  const [userName, setUsername] = useState(\"\"); // Utilisation du hook useState pour créer des états locaux pour le nom d'utilisateur\r\n  const [firstName, setFirstName] = useState(\"\"); // Prénom est en lecture seule\r\n  const [lastName, setLastName] = useState(\"\"); // Nom est en lecture seule\r\n  const [message, setMessage] = useState(\"\"); // État local pour stocker le message de confirmation\r\n\r\n  // Définition de la fonction de rappel qui gère les changements de valeur du champ du nom d'utilisateur\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'enregistrement des données du formulaire\r\n  const handleSave = async () => {\r\n    try {\r\n      // Appel API pour mettre à jour le nom d'utilisateur\r\n      await updateUsername(userName);\r\n      setMessage(\"Informations enregistrées avec succès !\");\r\n    } catch (error) {\r\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\r\n    }\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'annulation des modifications du formulaire\r\n  const handleCancel = () => {\r\n    setUsername(\"\");\r\n    setMessage(\"Modifications annulées.\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"edit-user-info\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"userName\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"userName\"\r\n            value={userName}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <input type=\"text\" id=\"firstName\" value={firstName} disabled />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <input type=\"text\" id=\"lastName\" value={lastName} disabled />\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button className=\"save-btn\" onClick={handleSave}>\r\n            Save\r\n          </button>\r\n          <button className=\"cancel-btn\" onClick={handleCancel}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {message && <div className=\"message\">{message}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;*/\r\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\nimport { updateUsername } from \"../../actions/authActions\"; // Importez la fonction d'action pour mettre à jour le nom d'utilisateur\r\n\r\nconst EditUserInfo = () => {\r\n  const [username, setUsername] = useState(\"\"); // Utilisation du hook useState pour créer des états locaux pour le nom d'utilisateur\r\n  const [firstName, setFirstName] = useState(\"\"); // Prénom est en lecture seule\r\n  const [lastName, setLastName] = useState(\"\"); // Nom est en lecture seule\r\n  const [message, setMessage] = useState(\"\"); // État local pour stocker le message de confirmation\r\n\r\n  // Définition de la fonction de rappel qui gère les changements de valeur du champ du nom d'utilisateur\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'enregistrement des données du formulaire\r\n  const handleSave = async () => {\r\n    try {\r\n      // Appel API pour mettre à jour le nom d'utilisateur\r\n      await updateUsername(username);\r\n      setMessage(\"Informations enregistrées avec succès !\");\r\n    } catch (error) {\r\n      setMessage(\"Une erreur est survenue lors de l'enregistrement.\");\r\n    }\r\n  };\r\n\r\n  // Définition de la fonction de rappel qui gère l'annulation des modifications du formulaire\r\n  const handleCancel = () => {\r\n    setUsername(\"\");\r\n    setMessage(\"Modifications annulées.\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"edit-user-info\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <input type=\"text\" id=\"firstName\" value={firstName} disabled />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <input type=\"text\" id=\"lastName\" value={lastName} disabled />\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button className=\"save-btn\" onClick={handleSave}>\r\n            Save\r\n          </button>\r\n          <button className=\"cancel-btn\" onClick={handleCancel}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {message && <div className=\"message\">{message}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;*/\r\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nconst EditUserInfo = () => {\r\n  const [username, setUsername] = useState(\"\"); //Utilisation du hook useState pour créer des états locaux pour le nom d'utilisateur, le prénom et le nom.\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n\r\n  //Définition de la fonction de rappel qui gère les changements de valeur du champ du nom d'utilisateur.\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n  //Définition de la fonction de rappel qui gère les changements de valeur du champ prénom.\r\n  const handleFirstNameChange = (event) => {\r\n    setFirstName(event.target.value);\r\n  };\r\n  //Définition de la fonction de rappel qui gère les changements de valeur du champ nom.\r\n  const handleLastNameChange = (event) => {\r\n    setLastName(event.target.value);\r\n  };\r\n  //Définition de la fonction de rappel qui gère l'enregistrement des données du formulaire.\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des données\r\n  };\r\n  //Définition de la fonction de rappel qui gère l'annulation des modifications du formulaire.\r\n  const handleCancel = () => {\r\n    // Réinitialiser les données du formulaire si nécessaire\r\n  };\r\n  //section contient le code JSX qui définit le rendu du composant.\r\n  /*Crée un champ de saisie de texte pour le nom d'utilisateur avec la valeur liée à l'état local username et \r\n  la fonction de rappel handleUsernameChange pour gérer les changements de valeur.*/\r\n/*return (\r\n    <div>\r\n      <div className=\"edit-user-info\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"firstName\"\r\n            value={firstName}\r\n            onChange={handleFirstNameChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"lastName\"\r\n            value={lastName}\r\n            onChange={handleLastNameChange}\r\n          />\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button className=\"save-btn\" onClick={handleSave}>\r\n            Save\r\n          </button>\r\n          <button className=\"cancel-btn\" onClick={handleCancel}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUserInfo;*/\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
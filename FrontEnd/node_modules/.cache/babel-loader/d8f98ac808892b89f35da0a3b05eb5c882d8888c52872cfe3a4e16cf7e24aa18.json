{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elodi\\\\OneDrive\\\\Documents\\\\ArgentBank-website\\\\FrontEnd\\\\src\\\\components\\\\EditUserInfo\\\\EditUserInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../EditUserInfo/EditUserinfo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditUserInfo({\n  isLoggedIn,\n  onEditComplete,\n  initialFirstName,\n  initialLastName,\n  initialUsername\n}) {\n  _s();\n  const [firstName, setFirstName] = useState(initialFirstName || \"\");\n  const [lastName, setLastName] = useState(initialLastName || \"\");\n  const [newUsername, setNewUsername] = useState(initialUsername || \"\");\n  const [showForm, setShowForm] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [confirmationType, setConfirmationType] = useState(\"\"); // Nouveau state pour stocker le type de confirmation\n\n  const handleSubmit = () => {\n    // Logique de sauvegarde des modifications\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\n    onEditComplete({\n      firstName,\n      lastName,\n      username: newUsername\n    });\n    setShowConfirmation(true);\n    setConfirmationType(\"save\"); // Mise à jour du type de confirmation\n\n    setTimeout(() => {\n      setShowConfirmation(false);\n      setConfirmationType(\"\"); // Réinitialisation du type de confirmation\n      resetFields();\n    }, 2000);\n  };\n  const handleCancel = () => {\n    resetFields();\n    setShowConfirmation(true);\n    setConfirmationType(\"cancel\"); // Mise à jour du type de confirmation\n\n    setTimeout(() => {\n      setShowConfirmation(false);\n      setConfirmationType(\"\"); // Réinitialisation du type de confirmation\n    }, 2000);\n  };\n  const resetFields = () => {\n    setFirstName(initialFirstName || \"\");\n    setLastName(initialLastName || \"\");\n    setNewUsername(initialUsername || \"\");\n    setShowForm(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-user-info\",\n      children: showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-message\",\n        children: confirmationType === \"save\" ? \"Enregistrement de vos données avec succès !\" : \"Annulation réussi des modifications effectuée\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(EditUserInfo, \"lbA1iMB0YGbExrz2eWwVsnvp1jc=\");\n_c = EditUserInfo;\nexport default EditUserInfo;\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nfunction EditUserInfo({ isLoggedIn, onEditComplete }) {\r\n  //états de initial à l'affichage du formulaire de modifications\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [newUsername, setNewUsername] = useState(\"\");\r\n  const [showForm, setShowForm] = useState(false);\r\n  //message de confirmation pour l'annulation ou la sauvegarde des données\r\n  const [showSaveConfirmation, setShowSaveConfirmation] = useState(false);\r\n  const [showCancelConfirmation, setShowCancelConfirmation] = useState(false);\r\n\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des modifications\r\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\r\n    onEditComplete({ firstName, lastName, username: newUsername });\r\n    setShowSaveConfirmation(true);\r\n    setTimeout(() => {\r\n      // afficher un message de confirmation d'envoi réussi\r\n      setShowSaveConfirmation(false);\r\n      // remet les champs a zéro une fois la sauved=garde des données enregistrées avec succès\r\n      resetFields();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Logique d'annulation des modifications\r\n    setShowCancelConfirmation(true);\r\n    setTimeout(() => {\r\n      // afficher le message de confirmation d'annulation de données\r\n      setShowCancelConfirmation(false);\r\n      //appel la méthode pour remmettre les champs de valeurs à zéro\r\n      resetFields();\r\n    }, 2000);\r\n  };\r\n  //remet les champs du formulaire à zéro, vide\r\n  const resetFields = () => {\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setNewUsername(\"\");\r\n    setShowForm(false);\r\n  };\r\n  // retourne le username, le firstname et le lastname que l'on peut modifier\r\n  // bouton \"save\" pour la sauvegarde des données avec message de confirmation en cas de réussite\r\n  // bouton \"cancel\" pour l'annulation des champs remplis du formulaire\r\n  return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <div className=\"edit-user-info\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              value={newUsername}\r\n              onChange={(e) => setNewUsername(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"firstName\"\r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"lastName\"\r\n              value={lastName}\r\n              onChange={(e) => setLastName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"save-btn\" onClick={handleSave}>\r\n              Save\r\n            </button>\r\n            <button className=\"cancel-btn\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {showSaveConfirmation && (\r\n            <div className=\"confirmation-message\">\r\n              Enregistrement de vos données avec succès !\r\n            </div>\r\n          )}\r\n          {showCancelConfirmation && (\r\n            <div className=\"confirmation-message\">\r\n              Annulation réussi des modifications effectuée\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditUserInfo;*/\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nfunction EditUserInfo({\r\n  isLoggedIn,\r\n  username,\r\n  originalUserInfo,\r\n  onEditComplete,\r\n}) {\r\n  const [firstName, setFirstName] = useState(originalUserInfo?.firstName || \"\");\r\n  const [lastName, setLastName] = useState(originalUserInfo?.lastName || \"\");\r\n  const [newUsername, setNewUsername] = useState(username);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des modifications\r\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\r\n    onEditComplete({ firstName, lastName, username: newUsername });\r\n    setShowForm(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Logique d'annulation des modifications\r\n    setFirstName(originalUserInfo?.firstName || \"\");\r\n    setLastName(originalUserInfo?.lastName || \"\");\r\n    setNewUsername(username);\r\n    setShowForm(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <div className=\"edit-user-info\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              value={newUsername}\r\n              onChange={(e) => setNewUsername(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"firstName\"\r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"lastName\"\r\n              value={lastName}\r\n              onChange={(e) => setLastName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"save-btn\" onClick={handleSave}>\r\n              Save\r\n            </button>\r\n            <button className=\"cancel-btn\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditUserInfo;*/\n\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nfunction EditUserInfo({\r\n  isLoggedIn,\r\n  username,\r\n  originalUserInfo,\r\n  onEditComplete,\r\n}) {\r\n  const [firstName, setFirstName] = useState(originalUserInfo?.firstName || \"\");\r\n  const [lastName, setLastName] = useState(originalUserInfo?.lastName || \"\");\r\n  const [newUsername, setNewUsername] = useState(username);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des modifications\r\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\r\n    onEditComplete({ firstName, lastName, username: newUsername });\r\n    setShowForm(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Logique d'annulation des modifications\r\n    setFirstName(originalUserInfo?.firstName || \"\");\r\n    setLastName(originalUserInfo?.lastName || \"\");\r\n    setNewUsername(username);\r\n    setShowForm(false);\r\n  };\r\n*/\n/*retourne un formualire à remplir qui apparait au clic sur le bouton edit name et ces infos seront enregistrés et \r\n  envoye au serveur sinon possibilité d'annuler cette modification, et de remettre les champs de saisie a zéro*/\n/* return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <div className=\"edit-user-info\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              value={newUsername}\r\n              onChange={(e) => setNewUsername(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"firstName\"\r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"lastName\"\r\n              value={lastName}\r\n              onChange={(e) => setLastName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"save-btn\" onClick={handleSave}>\r\n              Save\r\n            </button>\r\n            <button className=\"cancel-btn\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditUserInfo;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"EditUserInfo\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditUserInfo","isLoggedIn","onEditComplete","initialFirstName","initialLastName","initialUsername","_s","firstName","setFirstName","lastName","setLastName","newUsername","setNewUsername","showForm","setShowForm","showConfirmation","setShowConfirmation","confirmationType","setConfirmationType","handleSubmit","console","log","username","setTimeout","resetFields","handleCancel","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/components/EditUserInfo/EditUserInfo.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nfunction EditUserInfo({\r\n  isLoggedIn,\r\n  onEditComplete,\r\n  initialFirstName,\r\n  initialLastName,\r\n  initialUsername,\r\n}) {\r\n  const [firstName, setFirstName] = useState(initialFirstName || \"\");\r\n  const [lastName, setLastName] = useState(initialLastName || \"\");\r\n  const [newUsername, setNewUsername] = useState(initialUsername || \"\");\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n  const [confirmationType, setConfirmationType] = useState(\"\"); // Nouveau state pour stocker le type de confirmation\r\n\r\n  const handleSubmit = () => {\r\n    // Logique de sauvegarde des modifications\r\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\r\n    onEditComplete({ firstName, lastName, username: newUsername });\r\n    setShowConfirmation(true);\r\n    setConfirmationType(\"save\"); // Mise à jour du type de confirmation\r\n\r\n    setTimeout(() => {\r\n      setShowConfirmation(false);\r\n      setConfirmationType(\"\"); // Réinitialisation du type de confirmation\r\n      resetFields();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    resetFields();\r\n    setShowConfirmation(true);\r\n    setConfirmationType(\"cancel\"); // Mise à jour du type de confirmation\r\n\r\n    setTimeout(() => {\r\n      setShowConfirmation(false);\r\n      setConfirmationType(\"\"); // Réinitialisation du type de confirmation\r\n    }, 2000);\r\n  };\r\n\r\n  const resetFields = () => {\r\n    setFirstName(initialFirstName || \"\");\r\n    setLastName(initialLastName || \"\");\r\n    setNewUsername(initialUsername || \"\");\r\n    setShowForm(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <div className=\"edit-user-info\">\r\n          {/* ... reste du code inchangé ... */}\r\n          {showConfirmation && (\r\n            <div className=\"confirmation-message\">\r\n              {confirmationType === \"save\"\r\n                ? \"Enregistrement de vos données avec succès !\"\r\n                : \"Annulation réussi des modifications effectuée\"}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditUserInfo;\r\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nfunction EditUserInfo({ isLoggedIn, onEditComplete }) {\r\n  //états de initial à l'affichage du formulaire de modifications\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [newUsername, setNewUsername] = useState(\"\");\r\n  const [showForm, setShowForm] = useState(false);\r\n  //message de confirmation pour l'annulation ou la sauvegarde des données\r\n  const [showSaveConfirmation, setShowSaveConfirmation] = useState(false);\r\n  const [showCancelConfirmation, setShowCancelConfirmation] = useState(false);\r\n\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des modifications\r\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\r\n    onEditComplete({ firstName, lastName, username: newUsername });\r\n    setShowSaveConfirmation(true);\r\n    setTimeout(() => {\r\n      // afficher un message de confirmation d'envoi réussi\r\n      setShowSaveConfirmation(false);\r\n      // remet les champs a zéro une fois la sauved=garde des données enregistrées avec succès\r\n      resetFields();\r\n    }, 2000);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Logique d'annulation des modifications\r\n    setShowCancelConfirmation(true);\r\n    setTimeout(() => {\r\n      // afficher le message de confirmation d'annulation de données\r\n      setShowCancelConfirmation(false);\r\n      //appel la méthode pour remmettre les champs de valeurs à zéro\r\n      resetFields();\r\n    }, 2000);\r\n  };\r\n  //remet les champs du formulaire à zéro, vide\r\n  const resetFields = () => {\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setNewUsername(\"\");\r\n    setShowForm(false);\r\n  };\r\n  // retourne le username, le firstname et le lastname que l'on peut modifier\r\n  // bouton \"save\" pour la sauvegarde des données avec message de confirmation en cas de réussite\r\n  // bouton \"cancel\" pour l'annulation des champs remplis du formulaire\r\n  return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <div className=\"edit-user-info\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              value={newUsername}\r\n              onChange={(e) => setNewUsername(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"firstName\"\r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"lastName\"\r\n              value={lastName}\r\n              onChange={(e) => setLastName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"save-btn\" onClick={handleSave}>\r\n              Save\r\n            </button>\r\n            <button className=\"cancel-btn\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {showSaveConfirmation && (\r\n            <div className=\"confirmation-message\">\r\n              Enregistrement de vos données avec succès !\r\n            </div>\r\n          )}\r\n          {showCancelConfirmation && (\r\n            <div className=\"confirmation-message\">\r\n              Annulation réussi des modifications effectuée\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditUserInfo;*/\r\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nfunction EditUserInfo({\r\n  isLoggedIn,\r\n  username,\r\n  originalUserInfo,\r\n  onEditComplete,\r\n}) {\r\n  const [firstName, setFirstName] = useState(originalUserInfo?.firstName || \"\");\r\n  const [lastName, setLastName] = useState(originalUserInfo?.lastName || \"\");\r\n  const [newUsername, setNewUsername] = useState(username);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des modifications\r\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\r\n    onEditComplete({ firstName, lastName, username: newUsername });\r\n    setShowForm(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Logique d'annulation des modifications\r\n    setFirstName(originalUserInfo?.firstName || \"\");\r\n    setLastName(originalUserInfo?.lastName || \"\");\r\n    setNewUsername(username);\r\n    setShowForm(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <div className=\"edit-user-info\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              value={newUsername}\r\n              onChange={(e) => setNewUsername(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"firstName\"\r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"lastName\"\r\n              value={lastName}\r\n              onChange={(e) => setLastName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"save-btn\" onClick={handleSave}>\r\n              Save\r\n            </button>\r\n            <button className=\"cancel-btn\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditUserInfo;*/\r\n\r\n/*import React, { useState } from \"react\";\r\nimport \"../EditUserInfo/EditUserinfo.css\";\r\n\r\nfunction EditUserInfo({\r\n  isLoggedIn,\r\n  username,\r\n  originalUserInfo,\r\n  onEditComplete,\r\n}) {\r\n  const [firstName, setFirstName] = useState(originalUserInfo?.firstName || \"\");\r\n  const [lastName, setLastName] = useState(originalUserInfo?.lastName || \"\");\r\n  const [newUsername, setNewUsername] = useState(username);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const handleSave = () => {\r\n    // Logique de sauvegarde des modifications\r\n    console.log(\"Informations utilisateur mises à jour avec succès !\");\r\n    onEditComplete({ firstName, lastName, username: newUsername });\r\n    setShowForm(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Logique d'annulation des modifications\r\n    setFirstName(originalUserInfo?.firstName || \"\");\r\n    setLastName(originalUserInfo?.lastName || \"\");\r\n    setNewUsername(username);\r\n    setShowForm(false);\r\n  };\r\n*/\r\n/*retourne un formualire à remplir qui apparait au clic sur le bouton edit name et ces infos seront enregistrés et \r\n  envoye au serveur sinon possibilité d'annuler cette modification, et de remettre les champs de saisie a zéro*/\r\n/* return (\r\n    <div>\r\n      {isLoggedIn && (\r\n        <div className=\"edit-user-info\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              value={newUsername}\r\n              onChange={(e) => setNewUsername(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"firstName\"\r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"lastName\"\r\n              value={lastName}\r\n              onChange={(e) => setLastName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"save-btn\" onClick={handleSave}>\r\n              Save\r\n            </button>\r\n            <button className=\"cancel-btn\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditUserInfo;\r\n*/\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,YAAYA,CAAC;EACpBC,UAAU;EACVC,cAAc;EACdC,gBAAgB;EAChBC,eAAe;EACfC;AACF,CAAC,EAAE;EAAAC,EAAA;EACD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAACM,gBAAgB,IAAI,EAAE,CAAC;EAClE,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAACO,eAAe,IAAI,EAAE,CAAC;EAC/D,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAACQ,eAAe,IAAI,EAAE,CAAC;EACrE,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACkB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACoB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9D,MAAMsB,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IAClEnB,cAAc,CAAC;MAAEK,SAAS;MAAEE,QAAQ;MAAEa,QAAQ,EAAEX;IAAY,CAAC,CAAC;IAC9DK,mBAAmB,CAAC,IAAI,CAAC;IACzBE,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;;IAE7BK,UAAU,CAAC,MAAM;MACfP,mBAAmB,CAAC,KAAK,CAAC;MAC1BE,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;MACzBM,WAAW,CAAC,CAAC;IACf,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBD,WAAW,CAAC,CAAC;IACbR,mBAAmB,CAAC,IAAI,CAAC;IACzBE,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;;IAE/BK,UAAU,CAAC,MAAM;MACfP,mBAAmB,CAAC,KAAK,CAAC;MAC1BE,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxBhB,YAAY,CAACL,gBAAgB,IAAI,EAAE,CAAC;IACpCO,WAAW,CAACN,eAAe,IAAI,EAAE,CAAC;IAClCQ,cAAc,CAACP,eAAe,IAAI,EAAE,CAAC;IACrCS,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACEf,OAAA;IAAA2B,QAAA,EACGzB,UAAU,iBACTF,OAAA;MAAK4B,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAE5BX,gBAAgB,iBACfhB,OAAA;QAAK4B,SAAS,EAAC,sBAAsB;QAAAD,QAAA,EAClCT,gBAAgB,KAAK,MAAM,GACxB,6CAA6C,GAC7C;MAA+C;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACzB,EAAA,CA9DQN,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAgErB,eAAeA,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
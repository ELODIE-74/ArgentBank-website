{"ast":null,"code":"//fichier authActions\nimport { createAsyncThunk } from \"@reduxjs/toolkit\"; //Cette fonction permet de créer des actions asynchrones pour Redux.\n\n/*action asynchrone appelée login. Lorsque cette action est déclenchée, elle effectue une requête POST \r\nsur l'endpoint http://localhost:3001/api/v1/user/login avec l'email et le mot de passe fournis en paramètres.*/\nexport const login = createAsyncThunk(\"auth/login\", async ({\n  email,\n  password\n}) => {\n  //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\n  const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  //Si la réponse n'est pas réussi lors de l'appel, affichage d'un message d'erreur.\n  if (!response.ok) {\n    throw new Error(\"Erreur lors de la connexion\");\n  }\n  //Si la réponse est ok (code HTTP 200), elle extrait le jeton d'authentification (token) de la réponse et le stocke dans le localStorage.\n  const data = await response.json();\n  //affichage du jeton d'authentification (token)\n  const token = data.body.token;\n  //vérification du jeton d'authentification\n  console.log(\"accessToken\", token);\n  localStorage.setItem(\"accessToken\", token); // stockage du jeton\n  //l'action (appel API) retourne les données complètes de la réponse.\n  return data;\n});\n/* autre action asynchrone appelée fetchUserProfile. Lorsque cette action est déclenchée, elle effectue une requête POST \r\nsur l'endpoint http://localhost:3001/api/v1/user/profile en envoyant le jeton d'authentification dans l'en-tête \"Authorization\".*/\nexport const fetchUserProfile = createAsyncThunk(\"auth/fetchUserProfile\", async accessToken => {\n  if (!accessToken) {\n    throw new Error(\"Aucun jeton d'authentification trouvé\");\n  }\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    //Si le jeton d'authentification n'est pas fourni, affichage d'un message d'erreur.\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    //Avec cette modification, la fonction fetchUserProfile retourne directement l'objet userData complet dans la réponse de l'api.\n    const userData = await response.json();\n    console.log(userData);\n    //Si la réponse est ok (code HTTP 200), elle extrait les données de l'utilisateur de la réponse et les retourne.\n    return userData;\n  } catch (error) {\n    throw new Error(error.message); //Si la réponse n'est pas ok, elle extrait le message d'erreur de la réponse affiche l'erreur.\n  }\n});\n//mise a jour et envoie a swagger du nouveau userName\nexport const updateUsername = createAsyncThunk(\"auth/updateUsername\", async ({\n  accessToken\n}) => {\n  console.log(\"accessToken:\", accessToken);\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    const updatedUserData = await response.json();\n    return updatedUserData;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","token","console","log","localStorage","setItem","fetchUserProfile","accessToken","Authorization","error","message","userData","updateUsername","updatedUserData"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/actions/authActions.js"],"sourcesContent":["//fichier authActions\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\"; //Cette fonction permet de créer des actions asynchrones pour Redux.\r\n\r\n/*action asynchrone appelée login. Lorsque cette action est déclenchée, elle effectue une requête POST \r\nsur l'endpoint http://localhost:3001/api/v1/user/login avec l'email et le mot de passe fournis en paramètres.*/\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    //Si la réponse n'est pas réussi lors de l'appel, affichage d'un message d'erreur.\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la connexion\");\r\n    }\r\n    //Si la réponse est ok (code HTTP 200), elle extrait le jeton d'authentification (token) de la réponse et le stocke dans le localStorage.\r\n    const data = await response.json();\r\n    //affichage du jeton d'authentification (token)\r\n    const token = data.body.token;\r\n    //vérification du jeton d'authentification\r\n    console.log(\"accessToken\", token);\r\n    localStorage.setItem(\"accessToken\", token); // stockage du jeton\r\n    //l'action (appel API) retourne les données complètes de la réponse.\r\n    return data;\r\n  }\r\n);\r\n/* autre action asynchrone appelée fetchUserProfile. Lorsque cette action est déclenchée, elle effectue une requête POST \r\nsur l'endpoint http://localhost:3001/api/v1/user/profile en envoyant le jeton d'authentification dans l'en-tête \"Authorization\".*/\r\nexport const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (accessToken) => {\r\n    if (!accessToken) {\r\n      throw new Error(\"Aucun jeton d'authentification trouvé\");\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:3001/api/v1/user/profile\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n        }\r\n      );\r\n      //Si le jeton d'authentification n'est pas fourni, affichage d'un message d'erreur.\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message);\r\n      }\r\n      //Avec cette modification, la fonction fetchUserProfile retourne directement l'objet userData complet dans la réponse de l'api.\r\n      const userData = await response.json();\r\n      console.log(userData);\r\n      //Si la réponse est ok (code HTTP 200), elle extrait les données de l'utilisateur de la réponse et les retourne.\r\n      return userData;\r\n    } catch (error) {\r\n      throw new Error(error.message); //Si la réponse n'est pas ok, elle extrait le message d'erreur de la réponse affiche l'erreur.\r\n    }\r\n  }\r\n);\r\n//mise a jour et envoie a swagger du nouveau userName\r\nexport const updateUsername = createAsyncThunk(\r\n  \"auth/updateUsername\",\r\n  async ({ accessToken }) => {\r\n    console.log(\"accessToken:\", accessToken);\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:3001/api/v1/user/profile\",\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      const updatedUserData = await response.json();\r\n      return updatedUserData;\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  }\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
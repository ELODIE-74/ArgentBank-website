{"ast":null,"code":"// Action types\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const FETCH_PROFILE = \"FETCH_PROFILE\";\nexport const FETCH_PROFILE_SUCCESS = \"FETCH_PROFILE_SUCCESS\";\nexport const FETCH_PROFILE_FAILURE = \"FETCH_PROFILE_FAILURE\";\n\n// Action creators\nexport const login = (email, password) => ({\n  type: LOGIN,\n  payload: {\n    email,\n    password\n  }\n});\nexport const loginSuccess = token => ({\n  type: LOGIN_SUCCESS,\n  payload: {\n    token\n  }\n});\nexport const loginFailure = error => ({\n  type: LOGIN_FAILURE,\n  payload: {\n    error\n  }\n});\nexport const fetchProfile = token => ({\n  type: FETCH_PROFILE,\n  payload: {\n    token\n  }\n});\nexport const fetchProfileSuccess = userData => ({\n  type: FETCH_PROFILE_SUCCESS,\n  payload: {\n    userData\n  }\n});\nexport const fetchProfileFailure = error => ({\n  type: FETCH_PROFILE_FAILURE,\n  payload: {\n    error\n  }\n});\n\n// Async actions\nexport const loginAsync = (email, password) => {\n  return async dispatch => {\n    dispatch(login(email, password));\n    try {\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Login failed\");\n      }\n      const {\n        token\n      } = await response.json();\n      dispatch(loginSuccess(token));\n      return token;\n    } catch (error) {\n      dispatch(loginFailure(error.message));\n      throw error;\n    }\n  };\n};\nexport const fetchProfileAsync = token => {\n  return async dispatch => {\n    dispatch(fetchProfile(token));\n    try {\n      const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user profile\");\n      }\n      const userData = await response.json();\n      dispatch(fetchProfileSuccess(userData));\n      return userData;\n    } catch (error) {\n      dispatch(fetchProfileFailure(error.message));\n      throw error;\n    }\n  };\n};\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la connexion\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    //affichage du jeton d'authentification (token)\r\n    const token = data.token;\r\n    localStorage.setItem(\"accessToken\", token); // stockage du jeton\r\n    return data;\r\n  }\r\n);\r\nexport const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async () => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    console.log(accessToken);\r\n    const response = await fetch(`http://localhost:3001/api/v1/user/profile`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n);*/\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, id } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ id }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\n\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, userName } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ userName }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\n\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n*/","map":{"version":3,"names":["LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","FETCH_PROFILE","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_FAILURE","login","email","password","type","payload","loginSuccess","token","loginFailure","error","fetchProfile","fetchProfileSuccess","userData","fetchProfileFailure","loginAsync","dispatch","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","message","fetchProfileAsync","Authorization"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/actions/authActions.js"],"sourcesContent":["// Action types\r\nexport const LOGIN = \"LOGIN\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\nexport const FETCH_PROFILE = \"FETCH_PROFILE\";\r\nexport const FETCH_PROFILE_SUCCESS = \"FETCH_PROFILE_SUCCESS\";\r\nexport const FETCH_PROFILE_FAILURE = \"FETCH_PROFILE_FAILURE\";\r\n\r\n// Action creators\r\nexport const login = (email, password) => ({\r\n  type: LOGIN,\r\n  payload: { email, password },\r\n});\r\n\r\nexport const loginSuccess = (token) => ({\r\n  type: LOGIN_SUCCESS,\r\n  payload: { token },\r\n});\r\n\r\nexport const loginFailure = (error) => ({\r\n  type: LOGIN_FAILURE,\r\n  payload: { error },\r\n});\r\n\r\nexport const fetchProfile = (token) => ({\r\n  type: FETCH_PROFILE,\r\n  payload: { token },\r\n});\r\n\r\nexport const fetchProfileSuccess = (userData) => ({\r\n  type: FETCH_PROFILE_SUCCESS,\r\n  payload: { userData },\r\n});\r\n\r\nexport const fetchProfileFailure = (error) => ({\r\n  type: FETCH_PROFILE_FAILURE,\r\n  payload: { error },\r\n});\r\n\r\n// Async actions\r\nexport const loginAsync = (email, password) => {\r\n  return async (dispatch) => {\r\n    dispatch(login(email, password));\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(\"Login failed\");\r\n      }\r\n      const { token } = await response.json();\r\n      dispatch(loginSuccess(token));\r\n      return token;\r\n    } catch (error) {\r\n      dispatch(loginFailure(error.message));\r\n      throw error;\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchProfileAsync = (token) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchProfile(token));\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:3001/api/v1/user/profile\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch user profile\");\r\n      }\r\n      const userData = await response.json();\r\n      dispatch(fetchProfileSuccess(userData));\r\n      return userData;\r\n    } catch (error) {\r\n      dispatch(fetchProfileFailure(error.message));\r\n      throw error;\r\n    }\r\n  };\r\n};\r\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    //appel API pour récupérer le token lors de l'authentification par le biais de l'email et du mot de passe\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la connexion\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    //affichage du jeton d'authentification (token)\r\n    const token = data.token;\r\n    localStorage.setItem(\"accessToken\", token); // stockage du jeton\r\n    return data;\r\n  }\r\n);\r\nexport const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async () => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    console.log(accessToken);\r\n    const response = await fetch(`http://localhost:3001/api/v1/user/profile`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n);*/\r\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, id } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ id }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\r\n\r\n/*export const fetchUserProfile = createAsyncThunk(\r\n  \"auth/fetchUserProfile\",\r\n  async (_, { getState }) => {\r\n    const { accessToken, userName } = getState().auth;\r\n\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify({ userName }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si la réponse n'est pas ok, nous lançons une erreur\r\n      throw new Error(\r\n        \"Erreur lors de la récupération du profil de l'utilisateur\"\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Retourne les données contenant le nom d'utilisateur (username)\r\n    return data;\r\n  }\r\n);*/\r\n\r\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n*/\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAK,GAAG,OAAO;AAC5B,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;AAC5D,OAAO,MAAMC,qBAAqB,GAAG,uBAAuB;;AAE5D;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,MAAM;EACzCC,IAAI,EAAET,KAAK;EACXU,OAAO,EAAE;IAAEH,KAAK;IAAEC;EAAS;AAC7B,CAAC,CAAC;AAEF,OAAO,MAAMG,YAAY,GAAIC,KAAK,KAAM;EACtCH,IAAI,EAAER,aAAa;EACnBS,OAAO,EAAE;IAAEE;EAAM;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAIC,KAAK,KAAM;EACtCL,IAAI,EAAEP,aAAa;EACnBQ,OAAO,EAAE;IAAEI;EAAM;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAIH,KAAK,KAAM;EACtCH,IAAI,EAAEN,aAAa;EACnBO,OAAO,EAAE;IAAEE;EAAM;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMI,mBAAmB,GAAIC,QAAQ,KAAM;EAChDR,IAAI,EAAEL,qBAAqB;EAC3BM,OAAO,EAAE;IAAEO;EAAS;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAIJ,KAAK,KAAM;EAC7CL,IAAI,EAAEJ,qBAAqB;EAC3BK,OAAO,EAAE;IAAEI;EAAM;AACnB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,UAAU,GAAGA,CAACZ,KAAK,EAAEC,QAAQ,KAAK;EAC7C,OAAO,MAAOY,QAAQ,IAAK;IACzBA,QAAQ,CAACd,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAAC;IAChC,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEpB,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MACF,IAAI,CAACa,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACjC;MACA,MAAM;QAAEjB;MAAM,CAAC,GAAG,MAAMS,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvCV,QAAQ,CAACT,YAAY,CAACC,KAAK,CAAC,CAAC;MAC7B,OAAOA,KAAK;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdM,QAAQ,CAACP,YAAY,CAACC,KAAK,CAACiB,OAAO,CAAC,CAAC;MACrC,MAAMjB,KAAK;IACb;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMkB,iBAAiB,GAAIpB,KAAK,IAAK;EAC1C,OAAO,MAAOQ,QAAQ,IAAK;IACzBA,QAAQ,CAACL,YAAY,CAACH,KAAK,CAAC,CAAC;IAC7B,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAC1B,2CAA2C,EAC3C;QACEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCS,aAAa,EAAG,UAASrB,KAAM;QACjC;MACF,CACF,CAAC;MACD,IAAI,CAACS,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MACA,MAAMZ,QAAQ,GAAG,MAAMI,QAAQ,CAACS,IAAI,CAAC,CAAC;MACtCV,QAAQ,CAACJ,mBAAmB,CAACC,QAAQ,CAAC,CAAC;MACvC,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdM,QAAQ,CAACF,mBAAmB,CAACJ,KAAK,CAACiB,OAAO,CAAC,CAAC;MAC5C,MAAMjB,KAAK;IACb;EACF,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
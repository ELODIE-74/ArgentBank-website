{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { login } from \"../actions/authActions\";\n// Importez l'action 'login'\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    accessToken: null,\n    username: null,\n    status: \"idle\",\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.accessToken = null;\n      state.username = null;\n      localStorage.removeItem(\"accessToken\");\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.fulfilled, (state, action) => {\n      state.accessToken = action.payload.token;\n      state.status = \"succeeded\";\n    }).addCase(fetchUserProfile.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchUserProfile.fulfilled, (state, action) => {\n      state.username = action.payload;\n      state.status = \"succeeded\";\n    }).addCase(fetchUserProfile.rejected, (state, action) => {\n      state.error = action.error.message;\n      state.status = \"failed\";\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/","map":{"version":3,"names":["createSlice","login","authSlice","name","initialState","accessToken","username","status","error","reducers","logout","state","localStorage","removeItem","extraReducers","builder","addCase","fulfilled","action","payload","token","fetchUserProfile","pending","rejected","message","actions","reducer"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/reducers/authReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { login } from \"../actions/authActions\";\r\n// Importez l'action 'login'\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    accessToken: null,\r\n    username: null,\r\n    status: \"idle\",\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.accessToken = null;\r\n      state.username = null;\r\n      localStorage.removeItem(\"accessToken\");\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.accessToken = action.payload.token;\r\n        state.status = \"succeeded\";\r\n      })\r\n      .addCase(fetchUserProfile.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchUserProfile.fulfilled, (state, action) => {\r\n        state.username = action.payload;\r\n        state.status = \"succeeded\";\r\n      })\r\n      .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.error = action.error.message;\r\n        state.status = \"failed\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n/*const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      //gestion de l'état de la connexion\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      //gestion de la connexion réussi avec redirection sur la page user\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      //gestion de l'état en cas d'erreur lors de l'authentification\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;*/\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,wBAAwB;AAC9C;AACA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC5BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,WAAW,EAAE,IAAI;IACjBC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACN,WAAW,GAAG,IAAI;MACxBM,KAAK,CAACL,QAAQ,GAAG,IAAI;MACrBM,YAAY,CAACC,UAAU,CAAC,aAAa,CAAC;IACxC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,KAAK,CAACgB,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC3CP,KAAK,CAACN,WAAW,GAAGa,MAAM,CAACC,OAAO,CAACC,KAAK;MACxCT,KAAK,CAACJ,MAAM,GAAG,WAAW;IAC5B,CAAC,CAAC,CACDS,OAAO,CAACK,gBAAgB,CAACC,OAAO,EAAGX,KAAK,IAAK;MAC5CA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDS,OAAO,CAACK,gBAAgB,CAACJ,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MACtDP,KAAK,CAACL,QAAQ,GAAGY,MAAM,CAACC,OAAO;MAC/BR,KAAK,CAACJ,MAAM,GAAG,WAAW;IAC5B,CAAC,CAAC,CACDS,OAAO,CAACK,gBAAgB,CAACE,QAAQ,EAAE,CAACZ,KAAK,EAAEO,MAAM,KAAK;MACrDP,KAAK,CAACH,KAAK,GAAGU,MAAM,CAACV,KAAK,CAACgB,OAAO;MAClCb,KAAK,CAACJ,MAAM,GAAG,QAAQ;IACzB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG;AAAO,CAAC,GAAGR,SAAS,CAACuB,OAAO;AAC3C,eAAevB,SAAS,CAACwB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
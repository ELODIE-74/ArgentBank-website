{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const login = createAsyncThunk(\"auth/login\", async ({\n  email,\n  password\n}) => {\n  const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Erreur lors de la connexion\");\n  }\n  const data = await response.json();\n  const token = data.token;\n  localStorage.setItem(\"accessToken\", token);\n  return data;\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    // Autres réducteurs si nécessaire\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport default authSlice.reducer;\n\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n\r\n// Action pour la déconnexion\r\nexport const signOut = createAsyncThunk(\"auth/signOut\", async () => {\r\n  // Appel API pour la déconnexion\r\n  await fetch(\"/api/logout\", {\r\n    method: \"POST\",\r\n  });\r\n\r\n  // Retourne un objet vide pour indiquer que la déconnexion a réussi\r\n  return {};\r\n});\r\n*/","map":{"version":3,"names":["createSlice","createAsyncThunk","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","token","localStorage","setItem","authSlice","name","initialState","user","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["C:/Users/elodi/OneDrive/Documents/ArgentBank-website/FrontEnd/src/actions/authActions.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const login = createAsyncThunk(\r\n  \"auth/login\",\r\n  async ({ email, password }) => {\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Erreur lors de la connexion\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    const token = data.token;\r\n    localStorage.setItem(\"accessToken\", token);\r\n    return data;\r\n  }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Autres réducteurs si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;\r\n\r\n/*import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Action pour la connexion\r\nexport const signIn = createAsyncThunk(\r\n  \"auth/signIn\",\r\n  async ({ email, password }, thunkAPI) => {\r\n    try {\r\n      // Appel API pour la connexion\r\n      const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Gestion des erreurs de l'API, transmettre correctment au  reducer\r\n        const error = await response.json();\r\n        thunkAPI.rejectWithValue({ erreur: error.value });\r\n        console.log(error);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.body.token;\r\n    } catch (error) {\r\n      // Gestion des erreurs réseau\r\n      thunkAPI.rejectWithValue({ erreur: error.value });\r\n      console.log(error);\r\n    }\r\n  }\r\n);\r\n\r\n// Action pour la déconnexion\r\nexport const signOut = createAsyncThunk(\"auth/signOut\", async () => {\r\n  // Appel API pour la déconnexion\r\n  await fetch(\"/api/logout\", {\r\n    method: \"POST\",\r\n  });\r\n\r\n  // Retourne un objet vide pour indiquer que la déconnexion a réussi\r\n  return {};\r\n});\r\n*/\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,KAAK,GAAGD,gBAAgB,CACnC,YAAY,EACZ,OAAO;EAAEE,KAAK;EAAEC;AAAS,CAAC,KAAK;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;IACtEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAClC,MAAMC,KAAK,GAAGF,IAAI,CAACE,KAAK;EACxBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,KAAK,CAAC;EAC1C,OAAOF,IAAI;AACb,CACF,CAAC;AAED,MAAMK,SAAS,GAAGnB,WAAW,CAAC;EAC5BoB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IACVC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC1B,KAAK,CAAC2B,OAAO,EAAGC,KAAK,IAAK;MACjCA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDI,OAAO,CAAC1B,KAAK,CAAC6B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACR,IAAI,GAAGU,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAAC1B,KAAK,CAACgC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC1CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAehB,SAAS,CAACiB,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}